﻿@model PM.Web.ViewModel.PesquisaNotaViewModel

<div>
    @if (ViewBag.Message != null)
    {
        <div class="alert alert-warning alert-dismissible fade show" role="alert">
            @ViewBag.Message
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
    }
</div>

<h2>Notas (Consultar)</h2>

<section id="loginForm">
    @using (Html.BeginForm("ConsultarNota", "Oficina2", FormMethod.Post, new { @class = "form-horizontal" }))
    {
        @*@Html.AntiForgeryToken()*@
        <form>
            <!-- Modal -->
            <div class="modal fade" id="modal_center" tabindex="-1" role="dialog" aria-labelledby="CancelarNota" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="TituloModalCentralizado">Cancelamento da Nota</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Fechar">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <p>Informe o motivo do cancelamento</p>
                            <textarea id="motivoCancelamento" class="form-control"></textarea>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Fechar</button>
                            <button type="button" class="btn btn-primary" id="btConfirmCancelamento">Confirmar</button>
                        </div>
                    </div>
                </div>
            </div>
            <!--/Modal-->

            <h5>Nota de Referência:</h5>
            @Html.HiddenFor(model => model.clickdescricaoNota, htmlAttributes: new { @id = "clickdescricaoNota" })

            <div class="row">
                <div class="col-md-3 col-lg-2">
                    <div class="form-group">
                        <label for="txtNotaReferen">Nota de Referência:</label>
                        <div style="display:block;">
                            <div style="float:left;">
                                @Html.EditorFor(model => model.cd_nota_sap_Ref, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.HiddenFor(model => model.id_nota_Ref)
                            </div>
                            <div style="float:left;">
                                &nbsp;&nbsp;
                                <a href="#" onclick="BuscarNotaRef();" class="btn btn-primary btn-circle btn-sm">
                                    <i class="fa fa-search" aria-hidden="true"></i>
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3 col-lg-2">
                    <div class="form-group">
                        <label for="txtTpNota">Tipo de Nota:</label>
                        @Html.EditorFor(model => model.cd_tp_nota_sap_Ref, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
                    </div>
                </div>
                <div class="col-md-6 col-lg-5 col-xl-4">
                    <div class="form-group">
                        <label for="txtDescrNota">Descrição da Nota:</label>
                        @Html.EditorFor(model => model.ds_descricao_Ref, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
                    </div>
                </div>
            </div>
            <h5>Nota de Oficina:</h5>
            <div class="row">
                <div class="col-md-4 col-lg-2">
                    <div class="form-group">
                        <label for="selectTpNota">Tipo de Nota:</label>
                        @Html.DropDownListFor(model => model.id_tp_nota_fk, (IEnumerable<SelectListItem>)Model.SelecionarTipoNota, new { @class = "form-control selectpicker pickerWorkflow" })
                    </div>
                </div>
                <div class="col-md-4 col-lg-2">
                    <div class="form-group">
                        <label for="txtNumNota">Núm. Nota:</label>
                        @Html.EditorFor(model => model.cd_nota_sap, new { htmlAttributes = new { @class = "form-control" } })
                    </div>
                </div>
                <div class="col-md-4 col-lg-2">
                    <div class="form-group">
                        <label for="txtNumOrdem">Núm. Ordem:</label>
                        @*@Html.EditorFor(model => model.numero_ordem, new { htmlAttributes = new { @class = "form-control" } })*@
                    </div>
                </div>
                <div class="col-md-8 col-lg-6 col-xl-6">
                    <div class="form-group">
                        <label for="txtDescrNota">Descrição da Nota:</label>
                        @Html.EditorFor(model => model.ds_descricao, new { htmlAttributes = new { @class = "form-control", onkeyup = "javascript:return isBackSpace(event, 'descricaoNota');", onkeypress = "javascript:return isNotCaracterEspecial(event, 'descricaoNota');", @onfocus = "showAutoComplete('descricaoNota');", @onblur = "hideAutoComplete('descricaoNota');" } })
                        <div class="container" id="descricaoNotaSugestoes" style="display: none; "></div>
                    </div>
                </div>
                <div class="col-md-4 col-lg-3">
                    <div class="form-group">
                        <label for="txtEtiqueta">Etiqueta:</label>
                        @Html.EditorFor(model => model.eq_etiqueta, new { htmlAttributes = new { @class = "form-control" } })
                    </div>
                </div>
                <div class="col-md-4 col-lg-3">
                    <div class="form-group">
                        <label for="txtElementoPEP">Elemento PEP:</label>
                        @Html.EditorFor(model => model.ds_elemento_pep, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
                    </div>
                </div>
                <div class="col-md-4 col-lg-3">
                    <div class="form-group">
                        <label for="selectSituacao">Situação (Status de Usuário):</label>
                        @Html.DropDownListFor(model => model.id_st_usuario, (IEnumerable<SelectListItem>)Model.SelecionarStatusUsuario, new { @class = "form-control selectpicker pickerWorkflow" })
                    </div>
                </div>
                <div class="col-md-4 col-lg-3">
                    <div class="form-group">
                        <label for="selectPropriedade">Prioriedade:</label>
                        @Html.DropDownListFor(model => model.id_prioridade_fk, (IEnumerable<SelectListItem>)Model.SelecionarPrioriedade, new { @class = "form-control selectpicker pickerWorkflow" })
                    </div>
                </div>
                <div class="col-md-5 col-lg-3">
                    <div class="form-group">
                        <label for="selectSintoma">Sintoma:</label>
                        @Html.DropDownListFor(model => model.id_code_sintoma_fk, (IEnumerable<SelectListItem>)Model.SelecionarCode, new { @class = "form-control selectpicker pickerWorkflow" })
                    </div>
                </div>
                <div class="col-md-7 col-lg-3">
                    <div class="form-group">
                        <label for="txtEquipamento">Equipamento:</label>
                        @Html.EditorFor(model => model.ds_objeto_tecnico, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.HiddenFor(model => model.id_equipamento_fk)
                    </div>
                </div>
                <div class="col-md-8 col-lg-6">
                    <div class="form-group">
                        <label for="txtDescrEquipamento">Descrição do Equipamento:</label>
                        @Html.EditorFor(model => model.ds_elemento_pep, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
                    </div>
                </div>
                <div class="col-md-4 col-lg-3">
                    <div class="form-group">
                        <label for="txtNumSerie">Núm. Série:</label>
                        @Html.EditorFor(model => model.ds_elemento_pep, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
                    </div>
                </div>
                <div class="col-md-4 col-lg-3">
                    <div class="form-group">
                        <label for="txtNumIdTecnica">Núm. Id. Técnica:</label>
                        @Html.EditorFor(model => model.ds_elemento_pep, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
                    </div>
                </div>
                <div class="col-md-4 col-lg-3">
                    <div class="form-group">
                        <label for="txtPatrimonio">Patrimônio:</label>
                        @Html.EditorFor(model => model.nr_inventario, new { htmlAttributes = new { @class = "form-control" } })
                    </div>
                </div>
                <div class="col-md-4 col-lg-3">
                    <div class="form-group">
                        <label for="txtCodMaterial">Cód. Material:</label>
                        @Html.DropDownListFor(model => model.id_material_fk, (IEnumerable<SelectListItem>)Model.SelecionarMaterial, new { @class = "form-control selectpicker pickerWorkflow" })
                    </div>
                </div>
                <div class="col-md-6 col-lg-3 col-xl-3">
                    <div class="form-group">
                        <label for="txtDescrMaterial">Descrição do Material:</label>
                        @Html.EditorFor(model => model.ds_material, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
                    </div>
                </div>
                <div class="col-md-6 col-lg-3">
                    <div class="form-group">
                        <label for="selectCentroTrab">Centro de Trabalho:</label>
                        @Html.DropDownListFor(model => model.id_centro_trabalho, (IEnumerable<SelectListItem>)Model.SelecionarCentroTrabalho, new { @class = "form-control selectpicker pickerWorkflow" })
                    </div>
                </div>
                <div class="col-md-6 col-lg-3 col-xl-3">
                    <div class="form-group">
                        <label for="txtDescrMaterial">Descrição do Centro de Trabalho:</label>
                        @Html.EditorFor(model => model.ds_breve_centro_trabalho, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md">
                    <div class="text-right">
                        @*<button onclick="location.href='@Url.Action("ConsultarNota2", "Oficina2")';return false;">Consultar2</button>*@
                        @*@Html.ActionLink("ConsultarNota2", "Oficina2")*@
                        <button type="submit" class="btn btn-primary">Consultar</button>
                        <button type="button" class="btn btn-primary" id="btnImprimir">Imprimir</button>
                        <button type="button" class="btn btn-primary" id="btnExportar">Exportar</button>
                        <button type="reset" class="btn btn-primary" id="btnLimpar">Limpar</button>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md">
                    <div class="table-responsive">
                        <table class="table table-striped table-bordered table custom">
                            <thead>
                                <tr>
                                    <th>Tipo</th>
                                    <th>Nota</th>
                                    <th>Ordem</th>
                                    <th>Status do Usuario</th>
                                    <th>Descrição da Nota</th>
                                    <th>Equipamento / Material</th>
                                    <th>Cód. Material</th>
                                    <th>Centro de Trabalho </th>
                                    <th>Data</th>
                                    <th>Etiqueta</th>
                                    <th>N. de Série</th>
                                    <th>Id. Técnica</th>
                                    <th>Patrimônio</th>
                                    <th class="acao">Ação</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model.ConsultaNotas)
                                {
                                    <tr class="gradeX">
                                        <td>
                                            @Html.DisplayFor(modelItem => item.TipoNota.DsTpNota)
                                        </td>
                                        <td>
                                            @Html.DisplayFor(modelItem => item.CdNotaSap)
                                        </td>
                                        <td>
                                            @*@Html.DisplayFor(modelItem => item.id_ordem)*@
                                        </td>
                                        <td>
                                            @*@Html.DisplayFor(modelItem => item.ds_st_usuario)*@
                                        </td>
                                        <td>
                                            @Html.DisplayFor(modelItem => item.DsDescricao)
                                        </td>
                                        <td>
                                            @Html.DisplayFor(modelItem => item.Equipamento.DsEquipamento)
                                        </td>
                                        <td>
                                            @Html.DisplayFor(modelItem => item.Material.DsMaterial)
                                        </td>
                                        <td>
                                            @Html.DisplayFor(modelItem => item.CentroTrabalho.DsCtTrabalho)
                                        </td>
                                        <td>
                                            @Html.DisplayFor(modelItem => item.DtHoraNota)
                                        </td>
                                        <td>
                                            @*@Html.DisplayFor(modelItem => item.EqEtiqueta)*@
                                        </td>
                                        <td>
                                            @Html.DisplayFor(modelItem => item.Equipamento.NrSerieFabricante)
                                        </td>
                                        <td>
                                            @*@Html.DisplayFor(modelItem => item.Equipamento.DsObjetoTecnico)*@
                                            @Html.DisplayFor(modelItem => item.Equipamento.DsFabricante)
                                        </td>
                                        <td>
                                            @*@Html.DisplayFor(modelItem => item.Equipamento.NrInventario)*@
                                            @Html.DisplayFor(modelItem => item.Equipamento.NrIdentifTecnica)
                                        </td>

                                        <td align="center">
                                            <a href="~/Oficina2/ConsultarNota/@item.IdNota.ToString()" data-id="1" class="btn_details"><i class="material-icons">search</i></a>
                                            <a href="~/Oficina2/EditarNota/@item.IdNota.ToString()" data-id="1" class="btn_edit"><i class="material-icons">edit</i></a>
                                            <a href="~/PesquisarNotas/close/@item.IdNota.ToString()" data-id="1" class="btn_cancel"><i class="material-icons" style="color:#FF0000">close</i></a>
                                            <a href="~/PesquisarNotas/done/@item.IdNota.ToString()" data-id="1" class="btn_free"><i class="material-icons">done</i></a>
                                            <a href="~/PesquisarNotas/query_builder/@item.IdNota.ToString()" data-id="1" class="btn_point"><i class="material-icons">query_builder</i></a>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </form>
    }
</section>

@*@section scripts {
        @Scripts.Render("~/Scripts/Oficina/pesquisarNota.js")
    }*@

<script type="text/javascript">
    function BuscarNotaRef() {
        $(function () {
            $.ajax({
                dataType: "json",
                type: "GET",
                url: "/Util/BuscarNotaRef",
                data: { 'nr_nota_sap': $("#cd_nota_sap_Ref").val() },
                success: function (dados) {
                    $("#id_nota_Ref").val(dados.IdNotaReferenciaFk);
                    $("#cd_tp_nota_sap_Ref").val(dados.TipoNota.DsTpNota);
                    $("#ds_descricao_Ref").val(dados.DsDescricao);
                }
            });
        });
    }

    function BuscarElementoPEP() {
        $(function () {
            $.ajax({
                dataType: "json",
                type: "GET",
                url: "/Util/BuscarElementoPEP",
                data: { 'id_elemento_pep': $("#id_elemento_pep").val() },
                success: function (dados) {
                    $("#ds_elemento_pep").val(dados.DsElementoPep);
                }
            });
        });
    }

    function BuscarEquipamento() {
        $(function () {
            $.ajax({
                dataType: "json",
                type: "GET",
                url: "/Util/BuscarEquipamento",
                data: { 'id_equipamento': $("#id_equipamento").val() },
                success: function (dados) {
                    $("#ds_objeto_tecnico").val(dados.DsObjetoTecnico);
                    $("#nr_serie_fabricante").val(dados.NrSerieFabricante);
                    $("#nr_identificacao_tecnica").val(dados.NrIdentificacaoTecnica);
                    $("#nr_inventario").val(dados.NrInventario);
                }
            });
        });
    }

    function BuscarMaterial() {
        $(function () {
            $.ajax({
                dataType: "json",
                type: "GET",
                url: "/Util/BuscarMaterial",
                data: { 'id_material': $("#id_material").val() },
                success: function (dados) {
                    $("#ds_material").val(dados.DsMaterial);
                }
            });
        });
    }

    //Rotinas JavaScript do Funcionamento do AutoComplete

    function hideAutoComplete(campo) {
        window.setTimeout(function () {
            if (campo == "descricaoNota") {
                $("#descricaoNotaSugestoes").hide();
            }
        }, 500);
    }

    function showAutoComplete(campo) {
        window.setTimeout(function () {
            if (campo == "descricaoNota") {
                $("#descricaoNotaSugestoes").show();
            }
        }, 500);
    }

    function isNotCaracterEspecial(evt, campo) {

        if (campo == "descricaoNota") {
            $("#clickdescricaoNota").val("");
        }

        var charCode = (evt.which) ? evt.which : event.keyCode;
        if (charCode == 47 || charCode == 39 || charCode == 124 || charCode == 92)
            return false;
        else {
            var term = encodeURIComponent($("#ds_descricao").val() + evt.key);
            carregarAjaxDados(campo, term);
        }
            return true;
    }

    function isBackSpace(evt, campo) {

        if (campo == "descricaoNota") {
            $("#clickdescricaoNota").val("");
        }

        var charCode = (evt.which) ? evt.which : event.keyCode;
        if (charCode != 8)
            return false;
        else {
            var term = encodeURIComponent($("#ds_descricao").val());
            carregarAjaxDados(campo, term);
        }
        return true;
    }

    function carregarAjaxDados(campo, term) {
        if (campo = 'descricaoNota') {
            $.ajax({
                dataType: "json",
                type: "GET",
                url: "/Util/AutoCompleteDescricaoNota",

                data: 'term=' + encodeURIComponent(term),
                beforeSend: function () {
                    $("#ds_descricao").css("background", "#FFF url(/lib/img/LoaderIcon.gif) no-repeat 165px");
                },
                success: function (data) {
                    if (data == "")
                        $("#descricaoNotaSugestoes").hide();
                    else
                        $("#descricaoNotaSugestoes").show();

                    $("#descricaoNotaSugestoes").html(data);
                    $("#descricaoNotaSugestoes").css("background", "#FFF");
                }
            });
        }
    }

    function selectDescricaoNota(val) {
        $("#ds_descricao").val(val);
        $("#descricaoNotaSugestoes").hide();
        $("#clickdescricaoNota").val("1");
    }

    @*function consultarHref() {
        var url = '@Url.Action("ConsultarNota", "oficina2")';
        var txtVal = $('#id_nota_Ref').val();
        window.location.href = url + '/?id_nota_Ref=' + txtVal;
    }*@
</script>
