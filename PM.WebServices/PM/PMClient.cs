// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace PM.WebServices
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.Net;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using Models;

    public partial class PMClient : ServiceClient<PMClient>, IPMClient
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        public Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public JsonSerializerSettings SerializationSettings { get; private set; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public JsonSerializerSettings DeserializationSettings { get; private set; }        

        /// <summary>
        /// Subscription credentials which uniquely identify client subscription.
        /// </summary>
        public ServiceClientCredentials Credentials { get; private set; }

        /// <summary>
        /// Gets the ICalendariosFabrica.
        /// </summary>
        public virtual ICalendariosFabrica CalendariosFabrica { get; private set; }

        /// <summary>
        /// Gets the ICapacidades.
        /// </summary>
        public virtual ICapacidades Capacidades { get; private set; }

        /// <summary>
        /// Gets the ICarros.
        /// </summary>
        public virtual ICarros Carros { get; private set; }

        /// <summary>
        /// Gets the ICatalogos.
        /// </summary>
        public virtual ICatalogos Catalogos { get; private set; }

        /// <summary>
        /// Gets the ICategoriasEquipamento.
        /// </summary>
        public virtual ICategoriasEquipamento CategoriasEquipamento { get; private set; }

        /// <summary>
        /// Gets the ICategoriasPontoMedicao.
        /// </summary>
        public virtual ICategoriasPontoMedicao CategoriasPontoMedicao { get; private set; }

        /// <summary>
        /// Gets the ICentrosCusto.
        /// </summary>
        public virtual ICentrosCusto CentrosCusto { get; private set; }

        /// <summary>
        /// Gets the ICentrosLocalizacao.
        /// </summary>
        public virtual ICentrosLocalizacao CentrosLocalizacao { get; private set; }

        /// <summary>
        /// Gets the ICentroTrabalhos.
        /// </summary>
        public virtual ICentroTrabalhos CentroTrabalhos { get; private set; }

        /// <summary>
        /// Gets the IChavesControle.
        /// </summary>
        public virtual IChavesControle ChavesControle { get; private set; }

        /// <summary>
        /// Gets the IClassificacoes.
        /// </summary>
        public virtual IClassificacoes Classificacoes { get; private set; }

        /// <summary>
        /// Gets the ICodes.
        /// </summary>
        public virtual ICodes Codes { get; private set; }

        /// <summary>
        /// Gets the ICodigosABC.
        /// </summary>
        public virtual ICodigosABC CodigosABC { get; private set; }

        /// <summary>
        /// Gets the IComplementos.
        /// </summary>
        public virtual IComplementos Complementos { get; private set; }

        /// <summary>
        /// Gets the IDiagnosticos.
        /// </summary>
        public virtual IDiagnosticos Diagnosticos { get; private set; }

        /// <summary>
        /// Gets the IDocumentos.
        /// </summary>
        public virtual IDocumentos Documentos { get; private set; }

        /// <summary>
        /// Gets the IElementosPEP.
        /// </summary>
        public virtual IElementosPEP ElementosPEP { get; private set; }

        /// <summary>
        /// Gets the IEmpregados.
        /// </summary>
        public virtual IEmpregados Empregados { get; private set; }

        /// <summary>
        /// Gets the IEntregaTremOperations.
        /// </summary>
        public virtual IEntregaTremOperations EntregaTremOperations { get; private set; }

        /// <summary>
        /// Gets the IEquipamentos.
        /// </summary>
        public virtual IEquipamentos Equipamentos { get; private set; }

        /// <summary>
        /// Gets the IEstrategias.
        /// </summary>
        public virtual IEstrategias Estrategias { get; private set; }

        /// <summary>
        /// Gets the IEventosGerador.
        /// </summary>
        public virtual IEventosGerador EventosGerador { get; private set; }

        /// <summary>
        /// Gets the IFrotas.
        /// </summary>
        public virtual IFrotas Frotas { get; private set; }

        /// <summary>
        /// Gets the IGrupoCodes.
        /// </summary>
        public virtual IGrupoCodes GrupoCodes { get; private set; }

        /// <summary>
        /// Gets the IIntervencoesOperacao.
        /// </summary>
        public virtual IIntervencoesOperacao IntervencoesOperacao { get; private set; }

        /// <summary>
        /// Gets the ILinhas.
        /// </summary>
        public virtual ILinhas Linhas { get; private set; }

        /// <summary>
        /// Gets the IListasTarefas.
        /// </summary>
        public virtual IListasTarefas ListasTarefas { get; private set; }

        /// <summary>
        /// Gets the IListaTarefaOperacaoComponentes.
        /// </summary>
        public virtual IListaTarefaOperacaoComponentes ListaTarefaOperacaoComponentes { get; private set; }

        /// <summary>
        /// Gets the IListaTarefaOperacoes.
        /// </summary>
        public virtual IListaTarefaOperacoes ListaTarefaOperacoes { get; private set; }

        /// <summary>
        /// Gets the ILocaisInstalacao.
        /// </summary>
        public virtual ILocaisInstalacao LocaisInstalacao { get; private set; }

        /// <summary>
        /// Gets the ILogLogins.
        /// </summary>
        public virtual ILogLogins LogLogins { get; private set; }

        /// <summary>
        /// Gets the IMaosDeObra.
        /// </summary>
        public virtual IMaosDeObra MaosDeObra { get; private set; }

        /// <summary>
        /// Gets the IMAPs.
        /// </summary>
        public virtual IMAPs MAPs { get; private set; }

        /// <summary>
        /// Gets the IMarcos.
        /// </summary>
        public virtual IMarcos Marcos { get; private set; }

        /// <summary>
        /// Gets the IMateriaisOperacao.
        /// </summary>
        public virtual IMateriaisOperacao MateriaisOperacao { get; private set; }

        /// <summary>
        /// Gets the IMaterials.
        /// </summary>
        public virtual IMaterials Materials { get; private set; }

        /// <summary>
        /// Gets the IMedidasNota.
        /// </summary>
        public virtual IMedidasNota MedidasNota { get; private set; }

        /// <summary>
        /// Gets the IModelosLinear.
        /// </summary>
        public virtual IModelosLinear ModelosLinear { get; private set; }

        /// <summary>
        /// Gets the IMotivoEntregaOperations.
        /// </summary>
        public virtual IMotivoEntregaOperations MotivoEntregaOperations { get; private set; }

        /// <summary>
        /// Gets the INotas.
        /// </summary>
        public virtual INotas Notas { get; private set; }

        /// <summary>
        /// Gets the IOperacoesOrdem.
        /// </summary>
        public virtual IOperacoesOrdem OperacoesOrdem { get; private set; }

        /// <summary>
        /// Gets the IOrdens.
        /// </summary>
        public virtual IOrdens Ordens { get; private set; }

        /// <summary>
        /// Gets the IParceiroOperations.
        /// </summary>
        public virtual IParceiroOperations ParceiroOperations { get; private set; }

        /// <summary>
        /// Gets the IPatioLinhaOperations.
        /// </summary>
        public virtual IPatioLinhaOperations PatioLinhaOperations { get; private set; }

        /// <summary>
        /// Gets the IPatios.
        /// </summary>
        public virtual IPatios Patios { get; private set; }

        /// <summary>
        /// Gets the IPontosMedicao.
        /// </summary>
        public virtual IPontosMedicao PontosMedicao { get; private set; }

        /// <summary>
        /// Gets the IPosicoes.
        /// </summary>
        public virtual IPosicoes Posicoes { get; private set; }

        /// <summary>
        /// Gets the IPrioridades.
        /// </summary>
        public virtual IPrioridades Prioridades { get; private set; }

        /// <summary>
        /// Gets the IProgramacaoOperations.
        /// </summary>
        public virtual IProgramacaoOperations ProgramacaoOperations { get; private set; }

        /// <summary>
        /// Gets the ISistemaAplicacaoOperations.
        /// </summary>
        public virtual ISistemaAplicacaoOperations SistemaAplicacaoOperations { get; private set; }

        /// <summary>
        /// Gets the ISistemaEmpresaOperations.
        /// </summary>
        public virtual ISistemaEmpresaOperations SistemaEmpresaOperations { get; private set; }

        /// <summary>
        /// Gets the ISistemaLogErrorOperations.
        /// </summary>
        public virtual ISistemaLogErrorOperations SistemaLogErrorOperations { get; private set; }

        /// <summary>
        /// Gets the ISistemaLogLoginOperations.
        /// </summary>
        public virtual ISistemaLogLoginOperations SistemaLogLoginOperations { get; private set; }

        /// <summary>
        /// Gets the ISistemaLogOperacoesOperations.
        /// </summary>
        public virtual ISistemaLogOperacoesOperations SistemaLogOperacoesOperations { get; private set; }

        /// <summary>
        /// Gets the ISistemaLogOperacoesItemOperations.
        /// </summary>
        public virtual ISistemaLogOperacoesItemOperations SistemaLogOperacoesItemOperations { get; private set; }

        /// <summary>
        /// Gets the ISistemaModuloOperations.
        /// </summary>
        public virtual ISistemaModuloOperations SistemaModuloOperations { get; private set; }

        /// <summary>
        /// Gets the ISistemaPerfilOperations.
        /// </summary>
        public virtual ISistemaPerfilOperations SistemaPerfilOperations { get; private set; }

        /// <summary>
        /// Gets the ISistemaPerfilItemOperations.
        /// </summary>
        public virtual ISistemaPerfilItemOperations SistemaPerfilItemOperations { get; private set; }

        /// <summary>
        /// Gets the ISistemas.
        /// </summary>
        public virtual ISistemas Sistemas { get; private set; }

        /// <summary>
        /// Gets the ISistemaTabelaOperations.
        /// </summary>
        public virtual ISistemaTabelaOperations SistemaTabelaOperations { get; private set; }

        /// <summary>
        /// Gets the ISistemaTabelaCampoOperations.
        /// </summary>
        public virtual ISistemaTabelaCampoOperations SistemaTabelaCampoOperations { get; private set; }

        /// <summary>
        /// Gets the ISistemaTipoDadoOperations.
        /// </summary>
        public virtual ISistemaTipoDadoOperations SistemaTipoDadoOperations { get; private set; }

        /// <summary>
        /// Gets the ISistemaTipoLogOperations.
        /// </summary>
        public virtual ISistemaTipoLogOperations SistemaTipoLogOperations { get; private set; }

        /// <summary>
        /// Gets the ISistemaUsuarioOperations.
        /// </summary>
        public virtual ISistemaUsuarioOperations SistemaUsuarioOperations { get; private set; }

        /// <summary>
        /// Gets the ISistemaUsuarioModuloOperations.
        /// </summary>
        public virtual ISistemaUsuarioModuloOperations SistemaUsuarioModuloOperations { get; private set; }

        /// <summary>
        /// Gets the IStatusCopeses.
        /// </summary>
        public virtual IStatusCopeses StatusCopeses { get; private set; }

        /// <summary>
        /// Gets the IStatusEntregaTremOperations.
        /// </summary>
        public virtual IStatusEntregaTremOperations StatusEntregaTremOperations { get; private set; }

        /// <summary>
        /// Gets the IStatusMedidas.
        /// </summary>
        public virtual IStatusMedidas StatusMedidas { get; private set; }

        /// <summary>
        /// Gets the IStatusOperacoes.
        /// </summary>
        public virtual IStatusOperacoes StatusOperacoes { get; private set; }

        /// <summary>
        /// Gets the IStatusPericias.
        /// </summary>
        public virtual IStatusPericias StatusPericias { get; private set; }

        /// <summary>
        /// Gets the IStatusProgramacaoTremOperations.
        /// </summary>
        public virtual IStatusProgramacaoTremOperations StatusProgramacaoTremOperations { get; private set; }

        /// <summary>
        /// Gets the IStatusSistemas.
        /// </summary>
        public virtual IStatusSistemas StatusSistemas { get; private set; }

        /// <summary>
        /// Gets the IStatusTremOperations.
        /// </summary>
        public virtual IStatusTremOperations StatusTremOperations { get; private set; }

        /// <summary>
        /// Gets the IStatusUsuarios.
        /// </summary>
        public virtual IStatusUsuarios StatusUsuarios { get; private set; }

        /// <summary>
        /// Gets the ITipoNotas.
        /// </summary>
        public virtual ITipoNotas TipoNotas { get; private set; }

        /// <summary>
        /// Gets the ITiposCapacidade.
        /// </summary>
        public virtual ITiposCapacidade TiposCapacidade { get; private set; }

        /// <summary>
        /// Gets the ITiposCentroTrabalho.
        /// </summary>
        public virtual ITiposCentroTrabalho TiposCentroTrabalho { get; private set; }

        /// <summary>
        /// Gets the ITiposMarcador.
        /// </summary>
        public virtual ITiposMarcador TiposMarcador { get; private set; }

        /// <summary>
        /// Gets the ITiposOrdem.
        /// </summary>
        public virtual ITiposOrdem TiposOrdem { get; private set; }

        /// <summary>
        /// Gets the ITrems.
        /// </summary>
        public virtual ITrems Trems { get; private set; }

        /// <summary>
        /// Gets the IUnidadesMedida.
        /// </summary>
        public virtual IUnidadesMedida UnidadesMedida { get; private set; }

        /// <summary>
        /// Gets the IZonas.
        /// </summary>
        public virtual IZonas Zonas { get; private set; }

        /// <summary>
        /// Initializes a new instance of the PMClient class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected PMClient(params DelegatingHandler[] handlers) : base(handlers)
        {
            this.Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the PMClient class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected PMClient(HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : base(rootHandler, handlers)
        {
            this.Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the PMClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected PMClient(Uri baseUri, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            this.BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the PMClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected PMClient(Uri baseUri, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            this.BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the PMClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public PMClient(ServiceClientCredentials credentials, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the PMClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public PMClient(ServiceClientCredentials credentials, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the PMClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public PMClient(Uri baseUri, ServiceClientCredentials credentials, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this.BaseUri = baseUri;
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the PMClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public PMClient(Uri baseUri, ServiceClientCredentials credentials, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this.BaseUri = baseUri;
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// An optional partial-method to perform custom initialization.
        ///</summary> 
        partial void CustomInitialize();
        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            this.CalendariosFabrica = new CalendariosFabrica(this);
            this.Capacidades = new Capacidades(this);
            this.Carros = new Carros(this);
            this.Catalogos = new Catalogos(this);
            this.CategoriasEquipamento = new CategoriasEquipamento(this);
            this.CategoriasPontoMedicao = new CategoriasPontoMedicao(this);
            this.CentrosCusto = new CentrosCusto(this);
            this.CentrosLocalizacao = new CentrosLocalizacao(this);
            this.CentroTrabalhos = new CentroTrabalhos(this);
            this.ChavesControle = new ChavesControle(this);
            this.Classificacoes = new Classificacoes(this);
            this.Codes = new Codes(this);
            this.CodigosABC = new CodigosABC(this);
            this.Complementos = new Complementos(this);
            this.Diagnosticos = new Diagnosticos(this);
            this.Documentos = new Documentos(this);
            this.ElementosPEP = new ElementosPEP(this);
            this.Empregados = new Empregados(this);
            this.EntregaTremOperations = new EntregaTremOperations(this);
            this.Equipamentos = new Equipamentos(this);
            this.Estrategias = new Estrategias(this);
            this.EventosGerador = new EventosGerador(this);
            this.Frotas = new Frotas(this);
            this.GrupoCodes = new GrupoCodes(this);
            this.IntervencoesOperacao = new IntervencoesOperacao(this);
            this.Linhas = new Linhas(this);
            this.ListasTarefas = new ListasTarefas(this);
            this.ListaTarefaOperacaoComponentes = new ListaTarefaOperacaoComponentes(this);
            this.ListaTarefaOperacoes = new ListaTarefaOperacoes(this);
            this.LocaisInstalacao = new LocaisInstalacao(this);
            this.LogLogins = new LogLogins(this);
            this.MaosDeObra = new MaosDeObra(this);
            this.MAPs = new MAPs(this);
            this.Marcos = new Marcos(this);
            this.MateriaisOperacao = new MateriaisOperacao(this);
            this.Materials = new Materials(this);
            this.MedidasNota = new MedidasNota(this);
            this.ModelosLinear = new ModelosLinear(this);
            this.MotivoEntregaOperations = new MotivoEntregaOperations(this);
            this.Notas = new Notas(this);
            this.OperacoesOrdem = new OperacoesOrdem(this);
            this.Ordens = new Ordens(this);
            this.ParceiroOperations = new ParceiroOperations(this);
            this.PatioLinhaOperations = new PatioLinhaOperations(this);
            this.Patios = new Patios(this);
            this.PontosMedicao = new PontosMedicao(this);
            this.Posicoes = new Posicoes(this);
            this.Prioridades = new Prioridades(this);
            this.ProgramacaoOperations = new ProgramacaoOperations(this);
            this.SistemaAplicacaoOperations = new SistemaAplicacaoOperations(this);
            this.SistemaEmpresaOperations = new SistemaEmpresaOperations(this);
            this.SistemaLogErrorOperations = new SistemaLogErrorOperations(this);
            this.SistemaLogLoginOperations = new SistemaLogLoginOperations(this);
            this.SistemaLogOperacoesOperations = new SistemaLogOperacoesOperations(this);
            this.SistemaLogOperacoesItemOperations = new SistemaLogOperacoesItemOperations(this);
            this.SistemaModuloOperations = new SistemaModuloOperations(this);
            this.SistemaPerfilOperations = new SistemaPerfilOperations(this);
            this.SistemaPerfilItemOperations = new SistemaPerfilItemOperations(this);
            this.Sistemas = new Sistemas(this);
            this.SistemaTabelaOperations = new SistemaTabelaOperations(this);
            this.SistemaTabelaCampoOperations = new SistemaTabelaCampoOperations(this);
            this.SistemaTipoDadoOperations = new SistemaTipoDadoOperations(this);
            this.SistemaTipoLogOperations = new SistemaTipoLogOperations(this);
            this.SistemaUsuarioOperations = new SistemaUsuarioOperations(this);
            this.SistemaUsuarioModuloOperations = new SistemaUsuarioModuloOperations(this);
            this.StatusCopeses = new StatusCopeses(this);
            this.StatusEntregaTremOperations = new StatusEntregaTremOperations(this);
            this.StatusMedidas = new StatusMedidas(this);
            this.StatusOperacoes = new StatusOperacoes(this);
            this.StatusPericias = new StatusPericias(this);
            this.StatusProgramacaoTremOperations = new StatusProgramacaoTremOperations(this);
            this.StatusSistemas = new StatusSistemas(this);
            this.StatusTremOperations = new StatusTremOperations(this);
            this.StatusUsuarios = new StatusUsuarios(this);
            this.TipoNotas = new TipoNotas(this);
            this.TiposCapacidade = new TiposCapacidade(this);
            this.TiposCentroTrabalho = new TiposCentroTrabalho(this);
            this.TiposMarcador = new TiposMarcador(this);
            this.TiposOrdem = new TiposOrdem(this);
            this.Trems = new Trems(this);
            this.UnidadesMedida = new UnidadesMedida(this);
            this.Zonas = new Zonas(this);
            this.BaseUri = new Uri("http://localhost:3068");
            SerializationSettings = new JsonSerializerSettings
            {
                Formatting = Formatting.Indented,
                DateFormatHandling = DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = DateTimeZoneHandling.Utc,
                NullValueHandling = NullValueHandling.Ignore,
                ReferenceLoopHandling = ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            DeserializationSettings = new JsonSerializerSettings
            {
                DateFormatHandling = DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = DateTimeZoneHandling.Utc,
                NullValueHandling = NullValueHandling.Ignore,
                ReferenceLoopHandling = ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            CustomInitialize();
        }    
    }
}
