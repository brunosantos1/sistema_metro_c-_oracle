// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace PM.WebServices.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class SistemaLogError
    {
        /// <summary>
        /// Initializes a new instance of the SistemaLogError class.
        /// </summary>
        public SistemaLogError() { }

        /// <summary>
        /// Initializes a new instance of the SistemaLogError class.
        /// </summary>
        public SistemaLogError(DateTime dtOcorrencia, string dsIpaddress, string nmMachine, string nmLogonUserIdentityName, string idLogonUserIdentityToken, string nmController, string nmAction, string dsUrlFull, string dsPathFile, string dsTypeError, string dsErrorId, string dsErrorMessage, string dsErrorSource, string dsStackTrace, string dsTargetSite, int idAplicacao, int? idLogError = default(int?), string dsErrorLink = default(string), string dsInnerException = default(string), BaseModel baseModel = default(BaseModel))
        {
            IdLogError = idLogError;
            DtOcorrencia = dtOcorrencia;
            DsIpaddress = dsIpaddress;
            NmMachine = nmMachine;
            NmLogonUserIdentityName = nmLogonUserIdentityName;
            IdLogonUserIdentityToken = idLogonUserIdentityToken;
            NmController = nmController;
            NmAction = nmAction;
            DsUrlFull = dsUrlFull;
            DsPathFile = dsPathFile;
            DsTypeError = dsTypeError;
            DsErrorLink = dsErrorLink;
            DsErrorId = dsErrorId;
            DsErrorMessage = dsErrorMessage;
            DsErrorSource = dsErrorSource;
            DsStackTrace = dsStackTrace;
            DsTargetSite = dsTargetSite;
            DsInnerException = dsInnerException;
            IdAplicacao = idAplicacao;
            BaseModel = baseModel;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id_log_error")]
        public int? IdLogError { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "dt_ocorrencia")]
        public DateTime DtOcorrencia { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ds_ipaddress")]
        public string DsIpaddress { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "nm_machine")]
        public string NmMachine { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "nm_logon_user_identity_name")]
        public string NmLogonUserIdentityName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id_logon_user_identity_token")]
        public string IdLogonUserIdentityToken { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "nm_controller")]
        public string NmController { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "nm_action")]
        public string NmAction { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ds_url_full")]
        public string DsUrlFull { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ds_path_file")]
        public string DsPathFile { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ds_type_error")]
        public string DsTypeError { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ds_error_link")]
        public string DsErrorLink { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ds_error_id")]
        public string DsErrorId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ds_error_message")]
        public string DsErrorMessage { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ds_error_source")]
        public string DsErrorSource { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ds_stack_trace")]
        public string DsStackTrace { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ds_target_site")]
        public string DsTargetSite { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ds_inner_exception")]
        public string DsInnerException { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id_aplicacao")]
        public int IdAplicacao { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "BaseModel")]
        public BaseModel BaseModel { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (DsIpaddress == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DsIpaddress");
            }
            if (NmMachine == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "NmMachine");
            }
            if (NmLogonUserIdentityName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "NmLogonUserIdentityName");
            }
            if (IdLogonUserIdentityToken == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "IdLogonUserIdentityToken");
            }
            if (NmController == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "NmController");
            }
            if (NmAction == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "NmAction");
            }
            if (DsUrlFull == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DsUrlFull");
            }
            if (DsPathFile == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DsPathFile");
            }
            if (DsTypeError == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DsTypeError");
            }
            if (DsErrorId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DsErrorId");
            }
            if (DsErrorMessage == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DsErrorMessage");
            }
            if (DsErrorSource == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DsErrorSource");
            }
            if (DsStackTrace == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DsStackTrace");
            }
            if (DsTargetSite == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DsTargetSite");
            }
            if (this.DsIpaddress != null)
            {
                if (this.DsIpaddress.Length > 20)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "DsIpaddress", 20);
                }
                if (this.DsIpaddress.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "DsIpaddress", 0);
                }
            }
            if (this.NmMachine != null)
            {
                if (this.NmMachine.Length > 50)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "NmMachine", 50);
                }
                if (this.NmMachine.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "NmMachine", 0);
                }
            }
            if (this.NmLogonUserIdentityName != null)
            {
                if (this.NmLogonUserIdentityName.Length > 50)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "NmLogonUserIdentityName", 50);
                }
                if (this.NmLogonUserIdentityName.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "NmLogonUserIdentityName", 0);
                }
            }
            if (this.IdLogonUserIdentityToken != null)
            {
                if (this.IdLogonUserIdentityToken.Length > 50)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "IdLogonUserIdentityToken", 50);
                }
                if (this.IdLogonUserIdentityToken.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "IdLogonUserIdentityToken", 0);
                }
            }
            if (this.NmController != null)
            {
                if (this.NmController.Length > 50)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "NmController", 50);
                }
                if (this.NmController.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "NmController", 0);
                }
            }
            if (this.NmAction != null)
            {
                if (this.NmAction.Length > 50)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "NmAction", 50);
                }
                if (this.NmAction.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "NmAction", 0);
                }
            }
            if (this.DsUrlFull != null)
            {
                if (this.DsUrlFull.Length > 500)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "DsUrlFull", 500);
                }
                if (this.DsUrlFull.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "DsUrlFull", 0);
                }
            }
            if (this.DsPathFile != null)
            {
                if (this.DsPathFile.Length > 1000)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "DsPathFile", 1000);
                }
                if (this.DsPathFile.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "DsPathFile", 0);
                }
            }
            if (this.DsTypeError != null)
            {
                if (this.DsTypeError.Length > 8000)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "DsTypeError", 8000);
                }
                if (this.DsTypeError.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "DsTypeError", 0);
                }
            }
            if (this.DsErrorLink != null)
            {
                if (this.DsErrorLink.Length > 500)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "DsErrorLink", 500);
                }
                if (this.DsErrorLink.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "DsErrorLink", 0);
                }
            }
            if (this.DsErrorMessage != null)
            {
                if (this.DsErrorMessage.Length > 8000)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "DsErrorMessage", 8000);
                }
                if (this.DsErrorMessage.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "DsErrorMessage", 0);
                }
            }
            if (this.DsErrorSource != null)
            {
                if (this.DsErrorSource.Length > 8000)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "DsErrorSource", 8000);
                }
                if (this.DsErrorSource.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "DsErrorSource", 0);
                }
            }
            if (this.DsStackTrace != null)
            {
                if (this.DsStackTrace.Length > 8000)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "DsStackTrace", 8000);
                }
                if (this.DsStackTrace.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "DsStackTrace", 0);
                }
            }
            if (this.DsTargetSite != null)
            {
                if (this.DsTargetSite.Length > 8000)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "DsTargetSite", 8000);
                }
                if (this.DsTargetSite.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "DsTargetSite", 0);
                }
            }
            if (this.DsInnerException != null)
            {
                if (this.DsInnerException.Length > 8000)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "DsInnerException", 8000);
                }
                if (this.DsInnerException.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "DsInnerException", 0);
                }
            }
        }
    }
}
