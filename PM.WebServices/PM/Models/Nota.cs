// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace PM.WebServices.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class Nota
    {
        /// <summary>
        /// Initializes a new instance of the Nota class.
        /// </summary>
        public Nota() { }

        /// <summary>
        /// Initializes a new instance of the Nota class.
        /// </summary>
        public Nota(int idTpNotaFk, int idCentroTrabalhoFk, int? idNota = default(int?), string cdNotaSap = default(string), int? idLocalInstFk = default(int?), int? idLocalInstPrincFk = default(int?), int? idNotaReferenciaFk = default(int?), int? idStSistemaFk = default(int?), int? idCodeSintomaFk = default(int?), int? idPrioridadeFk = default(int?), int? idElementoPepFk = default(int?), int? idEquipamentoFk = default(int?), int? idMaterialFk = default(int?), int? idUnMedidTempoPrevFk = default(int?), int? idStPericiaFk = default(int?), int? idStCopeseFk = default(int?), int? idEvGeradorFk = default(int?), string dsObservacao = default(string), int? idPnAcionadoFk = default(int?), int? idCiAcionadoFk = default(int?), int? idPlRepresAcionadoFk = default(int?), int? idPlRepresAcionado2Fk = default(int?), int? idPlRepresAcionado3Fk = default(int?), int? idPlRepresAcionado4Fk = default(int?), string dsDescricao = default(string), int? idNotificadorFk = default(int?), string sgLocal = default(string), int? idDiagnosticoFk = default(int?), string mcInicial = default(string), double? diMarcoInicial = default(double?), double? coComprimento = default(double?), bool? stIfOperMaiorCincoMin = default(bool?), bool? stInNotavel = default(bool?), bool? stFumaca = default(bool?), bool? stReboque = default(bool?), double? qtLote = default(double?), double? tmPrevisto = default(double?), string nmCliente = default(string), string nrContrato = default(string), string cdBoMetro = default(string), string dsBoMetro = default(string), string cdBoSsp = default(string), string dsBoSsp = default(string), DateTime? dtHoraNota = default(DateTime?), int? idNotaVinculoFk = default(int?), int? idLinhaFk = default(int?), int? idEntregaTremFk = default(int?), int? idProgramacaoFk = default(int?), DateTime? dtHoraProgramada = default(DateTime?), int? idCodeTpServicoFk = default(int?), int? idSolicitanteFk = default(int?), BaseModel baseModel = default(BaseModel), TipoNota tipoNota = default(TipoNota), LocalInstalacao localInstalacao = default(LocalInstalacao), LocalInstalacao localInstPrinc = default(LocalInstalacao), Nota notaReferencia = default(Nota), StatusSistema statusSistema = default(StatusSistema), IList<StatusUsuario> statusUsuarios = default(IList<StatusUsuario>), Code codeSintoma = default(Code), Prioridade prioridade = default(Prioridade), CentroTrabalho centroTrabalho = default(CentroTrabalho), ElementoPEP elementoPEP = default(ElementoPEP), Equipamento equipamento = default(Equipamento), Material material = default(Material), Diagnostico diagnostico = default(Diagnostico), IList<Nota> notasVinculadas = default(IList<Nota>), IList<MedidaNota> medidasNota = default(IList<MedidaNota>), UnidadeMedida unidadeMedidaTempoPrevisto = default(UnidadeMedida), StatusPericia statusPericia = default(StatusPericia), StatusCopese statusCopese = default(StatusCopese), EventoGerador eventoGerador = default(EventoGerador), Empregado empregado = default(Empregado), Linha linha = default(Linha), Empregado empregadoPNAcionado = default(Empregado), CentroTrabalho centroTrabCiACionado = default(CentroTrabalho), Empregado empregadoReprAcionado = default(Empregado), Empregado empregadoReprAcionado2 = default(Empregado), Empregado empregadoReprAcionado3 = default(Empregado), Empregado empregadoReprAcionado4 = default(Empregado), EntregaTrem entregaTrem = default(EntregaTrem), Programacao programacao = default(Programacao), Code codeTpServico = default(Code), Empregado solicitante = default(Empregado))
        {
            IdNota = idNota;
            CdNotaSap = cdNotaSap;
            IdTpNotaFk = idTpNotaFk;
            IdLocalInstFk = idLocalInstFk;
            IdLocalInstPrincFk = idLocalInstPrincFk;
            IdNotaReferenciaFk = idNotaReferenciaFk;
            IdStSistemaFk = idStSistemaFk;
            IdCodeSintomaFk = idCodeSintomaFk;
            IdPrioridadeFk = idPrioridadeFk;
            IdCentroTrabalhoFk = idCentroTrabalhoFk;
            IdElementoPepFk = idElementoPepFk;
            IdEquipamentoFk = idEquipamentoFk;
            IdMaterialFk = idMaterialFk;
            IdUnMedidTempoPrevFk = idUnMedidTempoPrevFk;
            IdStPericiaFk = idStPericiaFk;
            IdStCopeseFk = idStCopeseFk;
            IdEvGeradorFk = idEvGeradorFk;
            DsObservacao = dsObservacao;
            IdPnAcionadoFk = idPnAcionadoFk;
            IdCiAcionadoFk = idCiAcionadoFk;
            IdPlRepresAcionadoFk = idPlRepresAcionadoFk;
            IdPlRepresAcionado2Fk = idPlRepresAcionado2Fk;
            IdPlRepresAcionado3Fk = idPlRepresAcionado3Fk;
            IdPlRepresAcionado4Fk = idPlRepresAcionado4Fk;
            DsDescricao = dsDescricao;
            IdNotificadorFk = idNotificadorFk;
            SgLocal = sgLocal;
            IdDiagnosticoFk = idDiagnosticoFk;
            McInicial = mcInicial;
            DiMarcoInicial = diMarcoInicial;
            CoComprimento = coComprimento;
            StIfOperMaiorCincoMin = stIfOperMaiorCincoMin;
            StInNotavel = stInNotavel;
            StFumaca = stFumaca;
            StReboque = stReboque;
            QtLote = qtLote;
            TmPrevisto = tmPrevisto;
            NmCliente = nmCliente;
            NrContrato = nrContrato;
            CdBoMetro = cdBoMetro;
            DsBoMetro = dsBoMetro;
            CdBoSsp = cdBoSsp;
            DsBoSsp = dsBoSsp;
            DtHoraNota = dtHoraNota;
            IdNotaVinculoFk = idNotaVinculoFk;
            IdLinhaFk = idLinhaFk;
            IdEntregaTremFk = idEntregaTremFk;
            IdProgramacaoFk = idProgramacaoFk;
            DtHoraProgramada = dtHoraProgramada;
            IdCodeTpServicoFk = idCodeTpServicoFk;
            IdSolicitanteFk = idSolicitanteFk;
            BaseModel = baseModel;
            TipoNota = tipoNota;
            LocalInstalacao = localInstalacao;
            LocalInstPrinc = localInstPrinc;
            NotaReferencia = notaReferencia;
            StatusSistema = statusSistema;
            StatusUsuarios = statusUsuarios;
            CodeSintoma = codeSintoma;
            Prioridade = prioridade;
            CentroTrabalho = centroTrabalho;
            ElementoPEP = elementoPEP;
            Equipamento = equipamento;
            Material = material;
            Diagnostico = diagnostico;
            NotasVinculadas = notasVinculadas;
            MedidasNota = medidasNota;
            UnidadeMedidaTempoPrevisto = unidadeMedidaTempoPrevisto;
            StatusPericia = statusPericia;
            StatusCopese = statusCopese;
            EventoGerador = eventoGerador;
            Empregado = empregado;
            Linha = linha;
            EmpregadoPNAcionado = empregadoPNAcionado;
            CentroTrabCiACionado = centroTrabCiACionado;
            EmpregadoReprAcionado = empregadoReprAcionado;
            EmpregadoReprAcionado2 = empregadoReprAcionado2;
            EmpregadoReprAcionado3 = empregadoReprAcionado3;
            EmpregadoReprAcionado4 = empregadoReprAcionado4;
            EntregaTrem = entregaTrem;
            Programacao = programacao;
            CodeTpServico = codeTpServico;
            Solicitante = solicitante;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id_nota")]
        public int? IdNota { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "cd_nota_sap")]
        public string CdNotaSap { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id_tp_nota_fk")]
        public int IdTpNotaFk { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id_local_inst_fk")]
        public int? IdLocalInstFk { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id_local_inst_princ_fk")]
        public int? IdLocalInstPrincFk { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id_nota_referencia_fk")]
        public int? IdNotaReferenciaFk { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id_st_sistema_fk")]
        public int? IdStSistemaFk { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id_code_sintoma_fk")]
        public int? IdCodeSintomaFk { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id_prioridade_fk")]
        public int? IdPrioridadeFk { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id_centro_trabalho_fk")]
        public int IdCentroTrabalhoFk { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id_elemento_pep_fk")]
        public int? IdElementoPepFk { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id_equipamento_fk")]
        public int? IdEquipamentoFk { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id_material_fk")]
        public int? IdMaterialFk { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id_un_medid_tempo_prev_fk")]
        public int? IdUnMedidTempoPrevFk { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id_st_pericia_fk")]
        public int? IdStPericiaFk { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id_st_copese_fk")]
        public int? IdStCopeseFk { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id_ev_gerador_fk")]
        public int? IdEvGeradorFk { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ds_observacao")]
        public string DsObservacao { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id_pn_acionado_fk")]
        public int? IdPnAcionadoFk { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id_ci_acionado_fk")]
        public int? IdCiAcionadoFk { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id_pl_repres_acionado_fk")]
        public int? IdPlRepresAcionadoFk { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id_pl_repres_acionado2_fk")]
        public int? IdPlRepresAcionado2Fk { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id_pl_repres_acionado3_fk")]
        public int? IdPlRepresAcionado3Fk { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id_pl_repres_acionado4_fk")]
        public int? IdPlRepresAcionado4Fk { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ds_descricao")]
        public string DsDescricao { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id_notificador_fk")]
        public int? IdNotificadorFk { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sg_local")]
        public string SgLocal { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id_diagnostico_fk")]
        public int? IdDiagnosticoFk { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "mc_inicial")]
        public string McInicial { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "di_marco_inicial")]
        public double? DiMarcoInicial { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "co_comprimento")]
        public double? CoComprimento { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "st_if_oper_maior_cinco_min")]
        public bool? StIfOperMaiorCincoMin { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "st_in_notavel")]
        public bool? StInNotavel { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "st_fumaca")]
        public bool? StFumaca { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "st_reboque")]
        public bool? StReboque { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "qt_lote")]
        public double? QtLote { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "tm_previsto")]
        public double? TmPrevisto { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "nm_cliente")]
        public string NmCliente { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "nr_contrato")]
        public string NrContrato { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "cd_bo_metro")]
        public string CdBoMetro { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ds_bo_metro")]
        public string DsBoMetro { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "cd_bo_ssp")]
        public string CdBoSsp { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ds_bo_ssp")]
        public string DsBoSsp { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "dt_hora_nota")]
        public DateTime? DtHoraNota { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id_nota_vinculo_fk")]
        public int? IdNotaVinculoFk { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id_linha_fk")]
        public int? IdLinhaFk { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id_entrega_trem_fk")]
        public int? IdEntregaTremFk { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id_programacao_fk")]
        public int? IdProgramacaoFk { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "dt_hora_programada")]
        public DateTime? DtHoraProgramada { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id_code_tp_servico_fk")]
        public int? IdCodeTpServicoFk { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id_solicitante_fk")]
        public int? IdSolicitanteFk { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "BaseModel")]
        public BaseModel BaseModel { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "TipoNota")]
        public TipoNota TipoNota { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "LocalInstalacao")]
        public LocalInstalacao LocalInstalacao { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "LocalInstPrinc")]
        public LocalInstalacao LocalInstPrinc { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "NotaReferencia")]
        public Nota NotaReferencia { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "StatusSistema")]
        public StatusSistema StatusSistema { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "StatusUsuarios")]
        public IList<StatusUsuario> StatusUsuarios { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "CodeSintoma")]
        public Code CodeSintoma { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Prioridade")]
        public Prioridade Prioridade { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "CentroTrabalho")]
        public CentroTrabalho CentroTrabalho { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ElementoPEP")]
        public ElementoPEP ElementoPEP { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Equipamento")]
        public Equipamento Equipamento { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Material")]
        public Material Material { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Diagnostico")]
        public Diagnostico Diagnostico { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "NotasVinculadas")]
        public IList<Nota> NotasVinculadas { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "MedidasNota")]
        public IList<MedidaNota> MedidasNota { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "UnidadeMedidaTempoPrevisto")]
        public UnidadeMedida UnidadeMedidaTempoPrevisto { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "StatusPericia")]
        public StatusPericia StatusPericia { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "StatusCopese")]
        public StatusCopese StatusCopese { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EventoGerador")]
        public EventoGerador EventoGerador { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Empregado")]
        public Empregado Empregado { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Linha")]
        public Linha Linha { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EmpregadoPNAcionado")]
        public Empregado EmpregadoPNAcionado { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "CentroTrabCiACionado")]
        public CentroTrabalho CentroTrabCiACionado { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EmpregadoReprAcionado")]
        public Empregado EmpregadoReprAcionado { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EmpregadoReprAcionado2")]
        public Empregado EmpregadoReprAcionado2 { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EmpregadoReprAcionado3")]
        public Empregado EmpregadoReprAcionado3 { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EmpregadoReprAcionado4")]
        public Empregado EmpregadoReprAcionado4 { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EntregaTrem")]
        public EntregaTrem EntregaTrem { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Programacao")]
        public Programacao Programacao { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "CodeTpServico")]
        public Code CodeTpServico { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Solicitante")]
        public Empregado Solicitante { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (this.CdNotaSap != null)
            {
                if (this.CdNotaSap.Length > 12)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "CdNotaSap", 12);
                }
                if (this.CdNotaSap.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "CdNotaSap", 0);
                }
            }
            if (this.DsObservacao != null)
            {
                if (this.DsObservacao.Length > 1000)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "DsObservacao", 1000);
                }
                if (this.DsObservacao.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "DsObservacao", 0);
                }
            }
            if (this.DsDescricao != null)
            {
                if (this.DsDescricao.Length > 40)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "DsDescricao", 40);
                }
                if (this.DsDescricao.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "DsDescricao", 0);
                }
            }
            if (this.SgLocal != null)
            {
                if (this.SgLocal.Length > 1)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "SgLocal", 1);
                }
                if (this.SgLocal.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "SgLocal", 0);
                }
            }
            if (this.McInicial != null)
            {
                if (this.McInicial.Length > 20)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "McInicial", 20);
                }
                if (this.McInicial.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "McInicial", 0);
                }
            }
            if (this.NmCliente != null)
            {
                if (this.NmCliente.Length > 40)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "NmCliente", 40);
                }
                if (this.NmCliente.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "NmCliente", 0);
                }
            }
            if (this.CdBoMetro != null)
            {
                if (this.CdBoMetro.Length > 12)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "CdBoMetro", 12);
                }
                if (this.CdBoMetro.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "CdBoMetro", 0);
                }
            }
            if (this.DsBoMetro != null)
            {
                if (this.DsBoMetro.Length > 50)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "DsBoMetro", 50);
                }
                if (this.DsBoMetro.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "DsBoMetro", 0);
                }
            }
            if (this.CdBoSsp != null)
            {
                if (this.CdBoSsp.Length > 12)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "CdBoSsp", 12);
                }
                if (this.CdBoSsp.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "CdBoSsp", 0);
                }
            }
            if (this.DsBoSsp != null)
            {
                if (this.DsBoSsp.Length > 50)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "DsBoSsp", 50);
                }
                if (this.DsBoSsp.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "DsBoSsp", 0);
                }
            }
            if (this.TipoNota != null)
            {
                this.TipoNota.Validate();
            }
            if (this.LocalInstalacao != null)
            {
                this.LocalInstalacao.Validate();
            }
            if (this.LocalInstPrinc != null)
            {
                this.LocalInstPrinc.Validate();
            }
            if (this.NotaReferencia != null)
            {
                this.NotaReferencia.Validate();
            }
            if (this.StatusSistema != null)
            {
                this.StatusSistema.Validate();
            }
            if (this.StatusUsuarios != null)
            {
                foreach (var element in this.StatusUsuarios)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.CodeSintoma != null)
            {
                this.CodeSintoma.Validate();
            }
            if (this.Prioridade != null)
            {
                this.Prioridade.Validate();
            }
            if (this.CentroTrabalho != null)
            {
                this.CentroTrabalho.Validate();
            }
            if (this.ElementoPEP != null)
            {
                this.ElementoPEP.Validate();
            }
            if (this.Equipamento != null)
            {
                this.Equipamento.Validate();
            }
            if (this.Material != null)
            {
                this.Material.Validate();
            }
            if (this.Diagnostico != null)
            {
                this.Diagnostico.Validate();
            }
            if (this.NotasVinculadas != null)
            {
                foreach (var element1 in this.NotasVinculadas)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
            if (this.MedidasNota != null)
            {
                foreach (var element2 in this.MedidasNota)
                {
                    if (element2 != null)
                    {
                        element2.Validate();
                    }
                }
            }
            if (this.StatusPericia != null)
            {
                this.StatusPericia.Validate();
            }
            if (this.StatusCopese != null)
            {
                this.StatusCopese.Validate();
            }
            if (this.EventoGerador != null)
            {
                this.EventoGerador.Validate();
            }
            if (this.Empregado != null)
            {
                this.Empregado.Validate();
            }
            if (this.Linha != null)
            {
                this.Linha.Validate();
            }
            if (this.EmpregadoPNAcionado != null)
            {
                this.EmpregadoPNAcionado.Validate();
            }
            if (this.CentroTrabCiACionado != null)
            {
                this.CentroTrabCiACionado.Validate();
            }
            if (this.EmpregadoReprAcionado != null)
            {
                this.EmpregadoReprAcionado.Validate();
            }
            if (this.EmpregadoReprAcionado2 != null)
            {
                this.EmpregadoReprAcionado2.Validate();
            }
            if (this.EmpregadoReprAcionado3 != null)
            {
                this.EmpregadoReprAcionado3.Validate();
            }
            if (this.EmpregadoReprAcionado4 != null)
            {
                this.EmpregadoReprAcionado4.Validate();
            }
            if (this.EntregaTrem != null)
            {
                this.EntregaTrem.Validate();
            }
            if (this.Programacao != null)
            {
                this.Programacao.Validate();
            }
            if (this.CodeTpServico != null)
            {
                this.CodeTpServico.Validate();
            }
            if (this.Solicitante != null)
            {
                this.Solicitante.Validate();
            }
        }
    }
}
