// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace PM.WebServices.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class PontoMedicao
    {
        /// <summary>
        /// Initializes a new instance of the PontoMedicao class.
        /// </summary>
        public PontoMedicao() { }

        /// <summary>
        /// Initializes a new instance of the PontoMedicao class.
        /// </summary>
        public PontoMedicao(int? idPtMedicao = default(int?), string cdSap = default(string), string icEquipLi = default(string), string lcInstalacao = default(string), int? idCgPtMedicaoFk = default(int?), string dsPtMedicao = default(string), string dsItemMedicao = default(string), string cdCaracteristica = default(string), int? nrCasaDecimal = default(int?), int? idUnMedidaFk = default(int?), bool? icContador = default(bool?), bool? icContDecrescente = default(bool?), double? atAnualContador = default(double?), bool? crTransferencia = default(bool?), double? nrTotalContador = default(double?), double? nrValorTeorico = default(double?), double? nrLimiteInferior = default(double?), double? nrLimiteSuperior = default(double?), int? idUnIntervaloFk = default(int?), string dsAdicional = default(string), DateTime? dtValidoDesde = default(DateTime?), DateTime? dtValidoAte = default(DateTime?), BaseModel baseModel = default(BaseModel), CategoriaPontoMedicao categoriaPontoMedicao = default(CategoriaPontoMedicao), UnidadeMedida unidadeMedida = default(UnidadeMedida), UnidadeMedida unidadeMedidaIntervalo = default(UnidadeMedida), IList<Equipamento> equipamentos = default(IList<Equipamento>))
        {
            IdPtMedicao = idPtMedicao;
            CdSap = cdSap;
            IcEquipLi = icEquipLi;
            LcInstalacao = lcInstalacao;
            IdCgPtMedicaoFk = idCgPtMedicaoFk;
            DsPtMedicao = dsPtMedicao;
            DsItemMedicao = dsItemMedicao;
            CdCaracteristica = cdCaracteristica;
            NrCasaDecimal = nrCasaDecimal;
            IdUnMedidaFk = idUnMedidaFk;
            IcContador = icContador;
            IcContDecrescente = icContDecrescente;
            AtAnualContador = atAnualContador;
            CrTransferencia = crTransferencia;
            NrTotalContador = nrTotalContador;
            NrValorTeorico = nrValorTeorico;
            NrLimiteInferior = nrLimiteInferior;
            NrLimiteSuperior = nrLimiteSuperior;
            IdUnIntervaloFk = idUnIntervaloFk;
            DsAdicional = dsAdicional;
            DtValidoDesde = dtValidoDesde;
            DtValidoAte = dtValidoAte;
            BaseModel = baseModel;
            CategoriaPontoMedicao = categoriaPontoMedicao;
            UnidadeMedida = unidadeMedida;
            UnidadeMedidaIntervalo = unidadeMedidaIntervalo;
            Equipamentos = equipamentos;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id_pt_medicao")]
        public int? IdPtMedicao { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "cd_sap")]
        public string CdSap { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ic_equip_li")]
        public string IcEquipLi { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lc_instalacao")]
        public string LcInstalacao { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id_cg_pt_medicao_fk")]
        public int? IdCgPtMedicaoFk { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ds_pt_medicao")]
        public string DsPtMedicao { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ds_item_medicao")]
        public string DsItemMedicao { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "cd_caracteristica")]
        public string CdCaracteristica { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "nr_casa_decimal")]
        public int? NrCasaDecimal { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id_un_medida_fk")]
        public int? IdUnMedidaFk { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ic_contador")]
        public bool? IcContador { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ic_cont_decrescente")]
        public bool? IcContDecrescente { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "at_anual_contador")]
        public double? AtAnualContador { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "cr_transferencia")]
        public bool? CrTransferencia { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "nr_total_contador")]
        public double? NrTotalContador { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "nr_valor_teorico")]
        public double? NrValorTeorico { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "nr_limite_inferior")]
        public double? NrLimiteInferior { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "nr_limite_superior")]
        public double? NrLimiteSuperior { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id_un_intervalo_fk")]
        public int? IdUnIntervaloFk { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ds_adicional")]
        public string DsAdicional { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "dt_valido_desde")]
        public DateTime? DtValidoDesde { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "dt_valido_ate")]
        public DateTime? DtValidoAte { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "BaseModel")]
        public BaseModel BaseModel { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "CategoriaPontoMedicao")]
        public CategoriaPontoMedicao CategoriaPontoMedicao { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "UnidadeMedida")]
        public UnidadeMedida UnidadeMedida { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "UnidadeMedidaIntervalo")]
        public UnidadeMedida UnidadeMedidaIntervalo { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Equipamentos")]
        public IList<Equipamento> Equipamentos { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (this.CdSap != null)
            {
                if (this.CdSap.Length > 12)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "CdSap", 12);
                }
                if (this.CdSap.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "CdSap", 0);
                }
            }
            if (this.IcEquipLi != null)
            {
                if (this.IcEquipLi.Length > 3)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "IcEquipLi", 3);
                }
                if (this.IcEquipLi.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "IcEquipLi", 0);
                }
            }
            if (this.LcInstalacao != null)
            {
                if (this.LcInstalacao.Length > 40)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "LcInstalacao", 40);
                }
                if (this.LcInstalacao.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "LcInstalacao", 0);
                }
            }
            if (this.DsPtMedicao != null)
            {
                if (this.DsPtMedicao.Length > 40)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "DsPtMedicao", 40);
                }
                if (this.DsPtMedicao.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "DsPtMedicao", 0);
                }
            }
            if (this.DsItemMedicao != null)
            {
                if (this.DsItemMedicao.Length > 20)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "DsItemMedicao", 20);
                }
                if (this.DsItemMedicao.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "DsItemMedicao", 0);
                }
            }
            if (this.CdCaracteristica != null)
            {
                if (this.CdCaracteristica.Length > 30)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "CdCaracteristica", 30);
                }
                if (this.CdCaracteristica.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "CdCaracteristica", 0);
                }
            }
            if (this.DsAdicional != null)
            {
                if (this.DsAdicional.Length > 40)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "DsAdicional", 40);
                }
                if (this.DsAdicional.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "DsAdicional", 0);
                }
            }
            if (this.CategoriaPontoMedicao != null)
            {
                this.CategoriaPontoMedicao.Validate();
            }
            if (this.Equipamentos != null)
            {
                foreach (var element in this.Equipamentos)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
