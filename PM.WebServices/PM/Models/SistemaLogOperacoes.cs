// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace PM.WebServices.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class SistemaLogOperacoes
    {
        /// <summary>
        /// Initializes a new instance of the SistemaLogOperacoes class.
        /// </summary>
        public SistemaLogOperacoes() { }

        /// <summary>
        /// Initializes a new instance of the SistemaLogOperacoes class.
        /// </summary>
        public SistemaLogOperacoes(DateTime dtOcorrencia, int idTipoLogFk, string dsIpaddress, string nmMachine, string nmLogonUserIdentityName, string idLogonUserIdentityToken, string nmController, string nmAction, string dsUrlFull, string dsJsonOrigem, string dsJsonPara, int idAplicacao, int? idLogOperacoes = default(int?), IList<SistemaLogOperacoesItem> item = default(IList<SistemaLogOperacoesItem>), BaseModel baseModel = default(BaseModel))
        {
            IdLogOperacoes = idLogOperacoes;
            DtOcorrencia = dtOcorrencia;
            IdTipoLogFk = idTipoLogFk;
            DsIpaddress = dsIpaddress;
            NmMachine = nmMachine;
            NmLogonUserIdentityName = nmLogonUserIdentityName;
            IdLogonUserIdentityToken = idLogonUserIdentityToken;
            NmController = nmController;
            NmAction = nmAction;
            DsUrlFull = dsUrlFull;
            DsJsonOrigem = dsJsonOrigem;
            DsJsonPara = dsJsonPara;
            IdAplicacao = idAplicacao;
            Item = item;
            BaseModel = baseModel;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id_log_operacoes")]
        public int? IdLogOperacoes { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "dt_ocorrencia")]
        public DateTime DtOcorrencia { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id_tipo_log_fk")]
        public int IdTipoLogFk { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ds_ipaddress")]
        public string DsIpaddress { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "nm_machine")]
        public string NmMachine { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "nm_logon_user_identity_name")]
        public string NmLogonUserIdentityName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id_logon_user_identity_token")]
        public string IdLogonUserIdentityToken { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "nm_controller")]
        public string NmController { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "nm_action")]
        public string NmAction { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ds_url_full")]
        public string DsUrlFull { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ds_json_origem")]
        public string DsJsonOrigem { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ds_json_para")]
        public string DsJsonPara { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id_aplicacao")]
        public int IdAplicacao { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Item")]
        public IList<SistemaLogOperacoesItem> Item { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "BaseModel")]
        public BaseModel BaseModel { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (DsIpaddress == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DsIpaddress");
            }
            if (NmMachine == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "NmMachine");
            }
            if (NmLogonUserIdentityName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "NmLogonUserIdentityName");
            }
            if (IdLogonUserIdentityToken == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "IdLogonUserIdentityToken");
            }
            if (NmController == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "NmController");
            }
            if (NmAction == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "NmAction");
            }
            if (DsUrlFull == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DsUrlFull");
            }
            if (DsJsonOrigem == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DsJsonOrigem");
            }
            if (DsJsonPara == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DsJsonPara");
            }
            if (this.DsIpaddress != null)
            {
                if (this.DsIpaddress.Length > 20)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "DsIpaddress", 20);
                }
                if (this.DsIpaddress.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "DsIpaddress", 0);
                }
            }
            if (this.NmMachine != null)
            {
                if (this.NmMachine.Length > 50)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "NmMachine", 50);
                }
                if (this.NmMachine.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "NmMachine", 0);
                }
            }
            if (this.NmLogonUserIdentityName != null)
            {
                if (this.NmLogonUserIdentityName.Length > 50)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "NmLogonUserIdentityName", 50);
                }
                if (this.NmLogonUserIdentityName.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "NmLogonUserIdentityName", 0);
                }
            }
            if (this.IdLogonUserIdentityToken != null)
            {
                if (this.IdLogonUserIdentityToken.Length > 50)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "IdLogonUserIdentityToken", 50);
                }
                if (this.IdLogonUserIdentityToken.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "IdLogonUserIdentityToken", 0);
                }
            }
            if (this.NmController != null)
            {
                if (this.NmController.Length > 50)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "NmController", 50);
                }
                if (this.NmController.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "NmController", 0);
                }
            }
            if (this.NmAction != null)
            {
                if (this.NmAction.Length > 50)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "NmAction", 50);
                }
                if (this.NmAction.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "NmAction", 0);
                }
            }
            if (this.DsUrlFull != null)
            {
                if (this.DsUrlFull.Length > 500)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "DsUrlFull", 500);
                }
                if (this.DsUrlFull.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "DsUrlFull", 0);
                }
            }
            if (this.DsJsonOrigem != null)
            {
                if (this.DsJsonOrigem.Length > 8000)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "DsJsonOrigem", 8000);
                }
                if (this.DsJsonOrigem.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "DsJsonOrigem", 0);
                }
            }
            if (this.DsJsonPara != null)
            {
                if (this.DsJsonPara.Length > 8000)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "DsJsonPara", 8000);
                }
                if (this.DsJsonPara.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "DsJsonPara", 0);
                }
            }
            if (this.Item != null)
            {
                foreach (var element in this.Item)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
