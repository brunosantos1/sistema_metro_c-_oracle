// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace PM.WebServices.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class Material
    {
        /// <summary>
        /// Initializes a new instance of the Material class.
        /// </summary>
        public Material() { }

        /// <summary>
        /// Initializes a new instance of the Material class.
        /// </summary>
        public Material(int? idMaterial = default(int?), string dsMaterial = default(string), string tpMaterial = default(string), string cdUnidadeMedida = default(string), string dsUnidadeMedida = default(string), string cdClasseAvaliacao = default(string), DateTime? dtCriacao = default(DateTime?), string cdMaterialAntigo = default(string), string rgEmpregado = default(string), DateTime? dtUltimaAlteracao = default(DateTime?), string dsTipoMaterial = default(string), string dsDetalhada = default(string), string cdSap = default(string), BaseModel baseModel = default(BaseModel))
        {
            IdMaterial = idMaterial;
            DsMaterial = dsMaterial;
            TpMaterial = tpMaterial;
            CdUnidadeMedida = cdUnidadeMedida;
            DsUnidadeMedida = dsUnidadeMedida;
            CdClasseAvaliacao = cdClasseAvaliacao;
            DtCriacao = dtCriacao;
            CdMaterialAntigo = cdMaterialAntigo;
            RgEmpregado = rgEmpregado;
            DtUltimaAlteracao = dtUltimaAlteracao;
            DsTipoMaterial = dsTipoMaterial;
            DsDetalhada = dsDetalhada;
            CdSap = cdSap;
            BaseModel = baseModel;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id_material")]
        public int? IdMaterial { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ds_material")]
        public string DsMaterial { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "tp_material")]
        public string TpMaterial { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "cd_unidade_medida")]
        public string CdUnidadeMedida { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ds_unidade_medida")]
        public string DsUnidadeMedida { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "cd_classe_avaliacao")]
        public string CdClasseAvaliacao { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "dt_criacao")]
        public DateTime? DtCriacao { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "cd_material_antigo")]
        public string CdMaterialAntigo { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "rg_empregado")]
        public string RgEmpregado { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "dt_ultima_alteracao")]
        public DateTime? DtUltimaAlteracao { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ds_tipo_material")]
        public string DsTipoMaterial { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ds_detalhada")]
        public string DsDetalhada { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "cd_sap")]
        public string CdSap { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "BaseModel")]
        public BaseModel BaseModel { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (this.DsMaterial != null)
            {
                if (this.DsMaterial.Length > 50)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "DsMaterial", 50);
                }
                if (this.DsMaterial.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "DsMaterial", 0);
                }
            }
            if (this.TpMaterial != null)
            {
                if (this.TpMaterial.Length > 4)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "TpMaterial", 4);
                }
                if (this.TpMaterial.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "TpMaterial", 0);
                }
            }
            if (this.CdUnidadeMedida != null)
            {
                if (this.CdUnidadeMedida.Length > 3)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "CdUnidadeMedida", 3);
                }
                if (this.CdUnidadeMedida.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "CdUnidadeMedida", 0);
                }
            }
            if (this.DsUnidadeMedida != null)
            {
                if (this.DsUnidadeMedida.Length > 30)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "DsUnidadeMedida", 30);
                }
                if (this.DsUnidadeMedida.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "DsUnidadeMedida", 0);
                }
            }
            if (this.CdClasseAvaliacao != null)
            {
                if (this.CdClasseAvaliacao.Length > 4)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "CdClasseAvaliacao", 4);
                }
                if (this.CdClasseAvaliacao.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "CdClasseAvaliacao", 0);
                }
            }
            if (this.CdMaterialAntigo != null)
            {
                if (this.CdMaterialAntigo.Length > 60)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "CdMaterialAntigo", 60);
                }
                if (this.CdMaterialAntigo.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "CdMaterialAntigo", 0);
                }
            }
            if (this.RgEmpregado != null)
            {
                if (this.RgEmpregado.Length > 10)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "RgEmpregado", 10);
                }
                if (this.RgEmpregado.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "RgEmpregado", 0);
                }
            }
            if (this.DsTipoMaterial != null)
            {
                if (this.DsTipoMaterial.Length > 30)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "DsTipoMaterial", 30);
                }
                if (this.DsTipoMaterial.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "DsTipoMaterial", 0);
                }
            }
            if (this.DsDetalhada != null)
            {
                if (this.DsDetalhada.Length > 2000)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "DsDetalhada", 2000);
                }
                if (this.DsDetalhada.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "DsDetalhada", 0);
                }
            }
            if (this.CdSap != null)
            {
                if (this.CdSap.Length > 12)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "CdSap", 12);
                }
                if (this.CdSap.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "CdSap", 0);
                }
            }
        }
    }
}
