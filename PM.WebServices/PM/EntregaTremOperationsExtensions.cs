// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace PM.WebServices
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for EntregaTremOperations.
    /// </summary>
    public static partial class EntregaTremOperationsExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static EntregaTrem GetById(this IEntregaTremOperations operations, int id)
            {
                return Task.Factory.StartNew(s => ((IEntregaTremOperations)s).GetByIdAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EntregaTrem> GetByIdAsync(this IEntregaTremOperations operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static EntregaTrem GetNavigationPropertiesByID(this IEntregaTremOperations operations, int id)
            {
                return Task.Factory.StartNew(s => ((IEntregaTremOperations)s).GetNavigationPropertiesByIDAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EntregaTrem> GetNavigationPropertiesByIDAsync(this IEntregaTremOperations operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNavigationPropertiesByIDWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idLinha'>
            /// </param>
            /// <param name='idPatio'>
            /// </param>
            /// <param name='idTrem'>
            /// </param>
            /// <param name='idMotivo'>
            /// </param>
            /// <param name='dtInicio'>
            /// </param>
            /// <param name='dtFinal'>
            /// </param>
            public static IList<EntregaTrem> GetByEntrega(this IEntregaTremOperations operations, int idLinha, int idPatio, int idTrem, int idMotivo, DateTime dtInicio, DateTime dtFinal)
            {
                return Task.Factory.StartNew(s => ((IEntregaTremOperations)s).GetByEntregaAsync(idLinha, idPatio, idTrem, idMotivo, dtInicio, dtFinal), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idLinha'>
            /// </param>
            /// <param name='idPatio'>
            /// </param>
            /// <param name='idTrem'>
            /// </param>
            /// <param name='idMotivo'>
            /// </param>
            /// <param name='dtInicio'>
            /// </param>
            /// <param name='dtFinal'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<EntregaTrem>> GetByEntregaAsync(this IEntregaTremOperations operations, int idLinha, int idPatio, int idTrem, int idMotivo, DateTime dtInicio, DateTime dtFinal, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByEntregaWithHttpMessagesAsync(idLinha, idPatio, idTrem, idMotivo, dtInicio, dtFinal, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<EntregaTrem> GetAll(this IEntregaTremOperations operations)
            {
                return Task.Factory.StartNew(s => ((IEntregaTremOperations)s).GetAllAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<EntregaTrem>> GetAllAsync(this IEntregaTremOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='obj'>
            /// </param>
            public static EntregaTrem Add(this IEntregaTremOperations operations, EntregaTrem obj)
            {
                return Task.Factory.StartNew(s => ((IEntregaTremOperations)s).AddAsync(obj), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='obj'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EntregaTrem> AddAsync(this IEntregaTremOperations operations, EntregaTrem obj, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddWithHttpMessagesAsync(obj, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='obj'>
            /// </param>
            public static EntregaTrem Update(this IEntregaTremOperations operations, EntregaTrem obj)
            {
                return Task.Factory.StartNew(s => ((IEntregaTremOperations)s).UpdateAsync(obj), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='obj'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EntregaTrem> UpdateAsync(this IEntregaTremOperations operations, EntregaTrem obj, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(obj, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static EntregaTrem DeleteById(this IEntregaTremOperations operations, int id)
            {
                return Task.Factory.StartNew(s => ((IEntregaTremOperations)s).DeleteByIdAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EntregaTrem> DeleteByIdAsync(this IEntregaTremOperations operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='obj'>
            /// </param>
            public static EntregaTrem LiberarEntregaTrem(this IEntregaTremOperations operations, EntregaTrem obj)
            {
                return Task.Factory.StartNew(s => ((IEntregaTremOperations)s).LiberarEntregaTremAsync(obj), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='obj'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EntregaTrem> LiberarEntregaTremAsync(this IEntregaTremOperations operations, EntregaTrem obj, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LiberarEntregaTremWithHttpMessagesAsync(obj, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='obj'>
            /// </param>
            public static EntregaTrem CancelaEntregaTrem(this IEntregaTremOperations operations, EntregaTrem obj)
            {
                return Task.Factory.StartNew(s => ((IEntregaTremOperations)s).CancelaEntregaTremAsync(obj), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='obj'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EntregaTrem> CancelaEntregaTremAsync(this IEntregaTremOperations operations, EntregaTrem obj, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CancelaEntregaTremWithHttpMessagesAsync(obj, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='obj'>
            /// </param>
            public static EntregaTrem MudarLocalEntregaTrem(this IEntregaTremOperations operations, EntregaTrem obj)
            {
                return Task.Factory.StartNew(s => ((IEntregaTremOperations)s).MudarLocalEntregaTremAsync(obj), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='obj'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EntregaTrem> MudarLocalEntregaTremAsync(this IEntregaTremOperations operations, EntregaTrem obj, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.MudarLocalEntregaTremWithHttpMessagesAsync(obj, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
