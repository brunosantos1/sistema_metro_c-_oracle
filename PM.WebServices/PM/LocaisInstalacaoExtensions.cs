// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace PM.WebServices
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for LocaisInstalacao.
    /// </summary>
    public static partial class LocaisInstalacaoExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static LocalInstalacao GetById(this ILocaisInstalacao operations, int id)
            {
                return Task.Factory.StartNew(s => ((ILocaisInstalacao)s).GetByIdAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LocalInstalacao> GetByIdAsync(this ILocaisInstalacao operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<LocalInstalacao> GetAll(this ILocaisInstalacao operations)
            {
                return Task.Factory.StartNew(s => ((ILocaisInstalacao)s).GetAllAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LocalInstalacao>> GetAllAsync(this ILocaisInstalacao operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='localInstalacao'>
            /// </param>
            public static IList<LocalInstalacao> ConsultarLCParametros(this ILocaisInstalacao operations, LocalInstalacao localInstalacao)
            {
                return Task.Factory.StartNew(s => ((ILocaisInstalacao)s).ConsultarLCParametrosAsync(localInstalacao), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='localInstalacao'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LocalInstalacao>> ConsultarLCParametrosAsync(this ILocaisInstalacao operations, LocalInstalacao localInstalacao, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConsultarLCParametrosWithHttpMessagesAsync(localInstalacao, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idFrota'>
            /// </param>
            /// <param name='idTrem'>
            /// </param>
            /// <param name='idCarro'>
            /// </param>
            public static IList<LocalInstalacao> Search(this ILocaisInstalacao operations, int idFrota, int idTrem, int idCarro)
            {
                return Task.Factory.StartNew(s => ((ILocaisInstalacao)s).SearchAsync(idFrota, idTrem, idCarro), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idFrota'>
            /// </param>
            /// <param name='idTrem'>
            /// </param>
            /// <param name='idCarro'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LocalInstalacao>> SearchAsync(this ILocaisInstalacao operations, int idFrota, int idTrem, int idCarro, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SearchWithHttpMessagesAsync(idFrota, idTrem, idCarro, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idFrota'>
            /// </param>
            /// <param name='idTrem'>
            /// </param>
            /// <param name='idCarro'>
            /// </param>
            /// <param name='idSistema'>
            /// </param>
            /// <param name='idComplemento'>
            /// </param>
            /// <param name='idPosicao'>
            /// </param>
            public static IList<LocalInstalacao> SearchMS(this ILocaisInstalacao operations, int idFrota, int idTrem, int idCarro, int idSistema, int? idComplemento = default(int?), int? idPosicao = default(int?))
            {
                return Task.Factory.StartNew(s => ((ILocaisInstalacao)s).SearchMSAsync(idFrota, idTrem, idCarro, idSistema, idComplemento, idPosicao), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idFrota'>
            /// </param>
            /// <param name='idTrem'>
            /// </param>
            /// <param name='idCarro'>
            /// </param>
            /// <param name='idSistema'>
            /// </param>
            /// <param name='idComplemento'>
            /// </param>
            /// <param name='idPosicao'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LocalInstalacao>> SearchMSAsync(this ILocaisInstalacao operations, int idFrota, int idTrem, int idCarro, int idSistema, int? idComplemento = default(int?), int? idPosicao = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SearchMSWithHttpMessagesAsync(idFrota, idTrem, idCarro, idSistema, idComplemento, idPosicao, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idFrota'>
            /// </param>
            /// <param name='idTrem'>
            /// </param>
            /// <param name='idCarro'>
            /// </param>
            /// <param name='idLinha'>
            /// </param>
            public static IList<LocalInstalacao> Search1(this ILocaisInstalacao operations, int idFrota, int idTrem, int idCarro, int idLinha)
            {
                return Task.Factory.StartNew(s => ((ILocaisInstalacao)s).Search1Async(idFrota, idTrem, idCarro, idLinha), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idFrota'>
            /// </param>
            /// <param name='idTrem'>
            /// </param>
            /// <param name='idCarro'>
            /// </param>
            /// <param name='idLinha'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LocalInstalacao>> Search1Async(this ILocaisInstalacao operations, int idFrota, int idTrem, int idCarro, int idLinha, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Search1WithHttpMessagesAsync(idFrota, idTrem, idCarro, idLinha, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idFrota'>
            /// </param>
            /// <param name='idTrem'>
            /// </param>
            /// <param name='idCarro'>
            /// </param>
            /// <param name='idLinha'>
            /// </param>
            /// <param name='idSistema'>
            /// </param>
            /// <param name='idComplmento'>
            /// </param>
            /// <param name='idPosicao'>
            /// </param>
            public static IList<LocalInstalacao> Search3(this ILocaisInstalacao operations, int idFrota, int idTrem, int idCarro, int idLinha, int idSistema, int idComplmento, int idPosicao)
            {
                return Task.Factory.StartNew(s => ((ILocaisInstalacao)s).Search3Async(idFrota, idTrem, idCarro, idLinha, idSistema, idComplmento, idPosicao), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idFrota'>
            /// </param>
            /// <param name='idTrem'>
            /// </param>
            /// <param name='idCarro'>
            /// </param>
            /// <param name='idLinha'>
            /// </param>
            /// <param name='idSistema'>
            /// </param>
            /// <param name='idComplmento'>
            /// </param>
            /// <param name='idPosicao'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LocalInstalacao>> Search3Async(this ILocaisInstalacao operations, int idFrota, int idTrem, int idCarro, int idLinha, int idSistema, int idComplmento, int idPosicao, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Search3WithHttpMessagesAsync(idFrota, idTrem, idCarro, idLinha, idSistema, idComplmento, idPosicao, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idFrota'>
            /// </param>
            /// <param name='idTrem'>
            /// </param>
            /// <param name='idCarro'>
            /// </param>
            /// <param name='idSistema'>
            /// </param>
            /// <param name='idComplmento'>
            /// </param>
            /// <param name='idPosicao'>
            /// </param>
            public static IList<LocalInstalacao> Search4(this ILocaisInstalacao operations, int idFrota, int idTrem, int idCarro, int idSistema, int idComplmento, int idPosicao)
            {
                return Task.Factory.StartNew(s => ((ILocaisInstalacao)s).Search4Async(idFrota, idTrem, idCarro, idSistema, idComplmento, idPosicao), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idFrota'>
            /// </param>
            /// <param name='idTrem'>
            /// </param>
            /// <param name='idCarro'>
            /// </param>
            /// <param name='idSistema'>
            /// </param>
            /// <param name='idComplmento'>
            /// </param>
            /// <param name='idPosicao'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LocalInstalacao>> Search4Async(this ILocaisInstalacao operations, int idFrota, int idTrem, int idCarro, int idSistema, int idComplmento, int idPosicao, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Search4WithHttpMessagesAsync(idFrota, idTrem, idCarro, idSistema, idComplmento, idPosicao, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='obj'>
            /// </param>
            public static LocalInstalacao Add(this ILocaisInstalacao operations, LocalInstalacao obj)
            {
                return Task.Factory.StartNew(s => ((ILocaisInstalacao)s).AddAsync(obj), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='obj'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LocalInstalacao> AddAsync(this ILocaisInstalacao operations, LocalInstalacao obj, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddWithHttpMessagesAsync(obj, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='obj'>
            /// </param>
            public static LocalInstalacao Update(this ILocaisInstalacao operations, LocalInstalacao obj)
            {
                return Task.Factory.StartNew(s => ((ILocaisInstalacao)s).UpdateAsync(obj), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='obj'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LocalInstalacao> UpdateAsync(this ILocaisInstalacao operations, LocalInstalacao obj, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(obj, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='localInstalacao'>
            /// </param>
            public static LocalInstalacao Delete(this ILocaisInstalacao operations, LocalInstalacao localInstalacao)
            {
                return Task.Factory.StartNew(s => ((ILocaisInstalacao)s).DeleteAsync(localInstalacao), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='localInstalacao'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LocalInstalacao> DeleteAsync(this ILocaisInstalacao operations, LocalInstalacao localInstalacao, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(localInstalacao, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
