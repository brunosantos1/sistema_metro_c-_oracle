// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace PM.WebServices
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for Notas.
    /// </summary>
    public static partial class NotasExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static Nota GetById(this INotas operations, int id)
            {
                return Task.Factory.StartNew(s => ((INotas)s).GetByIdAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Nota> GetByIdAsync(this INotas operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idFrota'>
            /// </param>
            /// <param name='idTrem'>
            /// </param>
            /// <param name='idCarro'>
            /// </param>
            public static object GetByFrotaTremCarro(this INotas operations, int idFrota, int idTrem, int idCarro)
            {
                return Task.Factory.StartNew(s => ((INotas)s).GetByFrotaTremCarroAsync(idFrota, idTrem, idCarro), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idFrota'>
            /// </param>
            /// <param name='idTrem'>
            /// </param>
            /// <param name='idCarro'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetByFrotaTremCarroAsync(this INotas operations, int idFrota, int idTrem, int idCarro, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByFrotaTremCarroWithHttpMessagesAsync(idFrota, idTrem, idCarro, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tpNota'>
            /// </param>
            public static Nota CarregarUltima(this INotas operations, string tpNota)
            {
                return Task.Factory.StartNew(s => ((INotas)s).CarregarUltimaAsync(tpNota), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tpNota'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Nota> CarregarUltimaAsync(this INotas operations, string tpNota, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CarregarUltimaWithHttpMessagesAsync(tpNota, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='motivo'>
            /// </param>
            public static Nota CancelarMC(this INotas operations, int id, string motivo)
            {
                return Task.Factory.StartNew(s => ((INotas)s).CancelarMCAsync(id, motivo), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='motivo'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Nota> CancelarMCAsync(this INotas operations, int id, string motivo, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CancelarMCWithHttpMessagesAsync(id, motivo, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='obj'>
            /// </param>
            public static Nota CriarMC(this INotas operations, Nota obj)
            {
                return Task.Factory.StartNew(s => ((INotas)s).CriarMCAsync(obj), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='obj'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Nota> CriarMCAsync(this INotas operations, Nota obj, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CriarMCWithHttpMessagesAsync(obj, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='obj'>
            /// </param>
            public static Nota EditarMC(this INotas operations, Nota obj)
            {
                return Task.Factory.StartNew(s => ((INotas)s).EditarMCAsync(obj), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='obj'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Nota> EditarMCAsync(this INotas operations, Nota obj, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditarMCWithHttpMessagesAsync(obj, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idFrota'>
            /// </param>
            /// <param name='idTrem'>
            /// </param>
            /// <param name='idCarro'>
            /// </param>
            /// <param name='idSistema'>
            /// </param>
            /// <param name='idSintoma'>
            /// </param>
            /// <param name='cdSap'>
            /// </param>
            /// <param name='dataInicial'>
            /// </param>
            /// <param name='dataFinal'>
            /// </param>
            /// <param name='idPrioridade'>
            /// </param>
            /// <param name='idNotificador'>
            /// </param>
            /// <param name='rgNotificador'>
            /// </param>
            /// <param name='idStatus'>
            /// </param>
            public static IList<Nota> PesquisarNotaMC(this INotas operations, int? idFrota = default(int?), int? idTrem = default(int?), int? idCarro = default(int?), int? idSistema = default(int?), int? idSintoma = default(int?), string cdSap = default(string), string dataInicial = default(string), string dataFinal = default(string), int? idPrioridade = default(int?), int? idNotificador = default(int?), int? rgNotificador = default(int?), int? idStatus = default(int?))
            {
                return Task.Factory.StartNew(s => ((INotas)s).PesquisarNotaMCAsync(idFrota, idTrem, idCarro, idSistema, idSintoma, cdSap, dataInicial, dataFinal, idPrioridade, idNotificador, rgNotificador, idStatus), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idFrota'>
            /// </param>
            /// <param name='idTrem'>
            /// </param>
            /// <param name='idCarro'>
            /// </param>
            /// <param name='idSistema'>
            /// </param>
            /// <param name='idSintoma'>
            /// </param>
            /// <param name='cdSap'>
            /// </param>
            /// <param name='dataInicial'>
            /// </param>
            /// <param name='dataFinal'>
            /// </param>
            /// <param name='idPrioridade'>
            /// </param>
            /// <param name='idNotificador'>
            /// </param>
            /// <param name='rgNotificador'>
            /// </param>
            /// <param name='idStatus'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Nota>> PesquisarNotaMCAsync(this INotas operations, int? idFrota = default(int?), int? idTrem = default(int?), int? idCarro = default(int?), int? idSistema = default(int?), int? idSintoma = default(int?), string cdSap = default(string), string dataInicial = default(string), string dataFinal = default(string), int? idPrioridade = default(int?), int? idNotificador = default(int?), int? rgNotificador = default(int?), int? idStatus = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PesquisarNotaMCWithHttpMessagesAsync(idFrota, idTrem, idCarro, idSistema, idSintoma, cdSap, dataInicial, dataFinal, idPrioridade, idNotificador, rgNotificador, idStatus, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idFrota'>
            /// </param>
            /// <param name='idTrem'>
            /// </param>
            /// <param name='idCarro'>
            /// </param>
            /// <param name='idSistema'>
            /// </param>
            /// <param name='idSintoma'>
            /// </param>
            /// <param name='cdSap'>
            /// </param>
            /// <param name='dataInicial'>
            /// </param>
            /// <param name='dataFinal'>
            /// </param>
            /// <param name='idPrioridade'>
            /// </param>
            /// <param name='idNotificador'>
            /// </param>
            /// <param name='rgNotificador'>
            /// </param>
            /// <param name='idStatus'>
            /// </param>
            /// <param name='idNotStatus'>
            /// </param>
            /// <param name='cdSap1'>
            /// </param>
            public static IList<Nota> PesquisarNotaProgramacao(this INotas operations, int? idFrota = default(int?), int? idTrem = default(int?), int? idCarro = default(int?), int? idSistema = default(int?), int? idSintoma = default(int?), string cdSap = default(string), string dataInicial = default(string), string dataFinal = default(string), int? idPrioridade = default(int?), int? idNotificador = default(int?), int? rgNotificador = default(int?), int? idStatus = default(int?), int? idNotStatus = default(int?), string cdSap1 = default(string))
            {
                return Task.Factory.StartNew(s => ((INotas)s).PesquisarNotaProgramacaoAsync(idFrota, idTrem, idCarro, idSistema, idSintoma, cdSap, dataInicial, dataFinal, idPrioridade, idNotificador, rgNotificador, idStatus, idNotStatus, cdSap1), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idFrota'>
            /// </param>
            /// <param name='idTrem'>
            /// </param>
            /// <param name='idCarro'>
            /// </param>
            /// <param name='idSistema'>
            /// </param>
            /// <param name='idSintoma'>
            /// </param>
            /// <param name='cdSap'>
            /// </param>
            /// <param name='dataInicial'>
            /// </param>
            /// <param name='dataFinal'>
            /// </param>
            /// <param name='idPrioridade'>
            /// </param>
            /// <param name='idNotificador'>
            /// </param>
            /// <param name='rgNotificador'>
            /// </param>
            /// <param name='idStatus'>
            /// </param>
            /// <param name='idNotStatus'>
            /// </param>
            /// <param name='cdSap1'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Nota>> PesquisarNotaProgramacaoAsync(this INotas operations, int? idFrota = default(int?), int? idTrem = default(int?), int? idCarro = default(int?), int? idSistema = default(int?), int? idSintoma = default(int?), string cdSap = default(string), string dataInicial = default(string), string dataFinal = default(string), int? idPrioridade = default(int?), int? idNotificador = default(int?), int? rgNotificador = default(int?), int? idStatus = default(int?), int? idNotStatus = default(int?), string cdSap1 = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PesquisarNotaProgramacaoWithHttpMessagesAsync(idFrota, idTrem, idCarro, idSistema, idSintoma, cdSap, dataInicial, dataFinal, idPrioridade, idNotificador, rgNotificador, idStatus, idNotStatus, cdSap1, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='obj'>
            /// </param>
            public static Nota CriarMS(this INotas operations, Nota obj)
            {
                return Task.Factory.StartNew(s => ((INotas)s).CriarMSAsync(obj), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='obj'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Nota> CriarMSAsync(this INotas operations, Nota obj, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CriarMSWithHttpMessagesAsync(obj, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='obj'>
            /// </param>
            public static Nota EditarMS(this INotas operations, Nota obj)
            {
                return Task.Factory.StartNew(s => ((INotas)s).EditarMSAsync(obj), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='obj'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Nota> EditarMSAsync(this INotas operations, Nota obj, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditarMSWithHttpMessagesAsync(obj, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='motivo'>
            /// </param>
            public static Nota CancelarMD(this INotas operations, int id, string motivo)
            {
                return Task.Factory.StartNew(s => ((INotas)s).CancelarMDAsync(id, motivo), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='motivo'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Nota> CancelarMDAsync(this INotas operations, int id, string motivo, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CancelarMDWithHttpMessagesAsync(id, motivo, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='obj'>
            /// </param>
            public static Nota CriarMD(this INotas operations, Nota obj)
            {
                return Task.Factory.StartNew(s => ((INotas)s).CriarMDAsync(obj), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='obj'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Nota> CriarMDAsync(this INotas operations, Nota obj, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CriarMDWithHttpMessagesAsync(obj, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='obj'>
            /// </param>
            public static Nota EditarMD(this INotas operations, Nota obj)
            {
                return Task.Factory.StartNew(s => ((INotas)s).EditarMDAsync(obj), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='obj'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Nota> EditarMDAsync(this INotas operations, Nota obj, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditarMDWithHttpMessagesAsync(obj, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nrNotaSap'>
            /// </param>
            public static Nota GetNotasCodigoSap(this INotas operations, string nrNotaSap)
            {
                return Task.Factory.StartNew(s => ((INotas)s).GetNotasCodigoSapAsync(nrNotaSap), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nrNotaSap'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Nota> GetNotasCodigoSapAsync(this INotas operations, string nrNotaSap, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNotasCodigoSapWithHttpMessagesAsync(nrNotaSap, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nrNotaSap'>
            /// </param>
            public static Nota GetNotasCodigoSapMR(this INotas operations, string nrNotaSap)
            {
                return Task.Factory.StartNew(s => ((INotas)s).GetNotasCodigoSapMRAsync(nrNotaSap), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nrNotaSap'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Nota> GetNotasCodigoSapMRAsync(this INotas operations, string nrNotaSap, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNotasCodigoSapMRWithHttpMessagesAsync(nrNotaSap, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nrNotaSap'>
            /// </param>
            public static Nota GetNotasCodigoSapEF(this INotas operations, string nrNotaSap)
            {
                return Task.Factory.StartNew(s => ((INotas)s).GetNotasCodigoSapEFAsync(nrNotaSap), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nrNotaSap'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Nota> GetNotasCodigoSapEFAsync(this INotas operations, string nrNotaSap, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNotasCodigoSapEFWithHttpMessagesAsync(nrNotaSap, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idFrota'>
            /// </param>
            /// <param name='idTrem'>
            /// </param>
            /// <param name='tpNota'>
            /// </param>
            public static IList<Nota> GetAbertasPendentes(this INotas operations, int idFrota, int idTrem, string tpNota)
            {
                return Task.Factory.StartNew(s => ((INotas)s).GetAbertasPendentesAsync(idFrota, idTrem, tpNota), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idFrota'>
            /// </param>
            /// <param name='idTrem'>
            /// </param>
            /// <param name='tpNota'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Nota>> GetAbertasPendentesAsync(this INotas operations, int idFrota, int idTrem, string tpNota, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAbertasPendentesWithHttpMessagesAsync(idFrota, idTrem, tpNota, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static Nota GetNavigationPropertiesByID(this INotas operations, int id)
            {
                return Task.Factory.StartNew(s => ((INotas)s).GetNavigationPropertiesByIDAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Nota> GetNavigationPropertiesByIDAsync(this INotas operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNavigationPropertiesByIDWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idTrem'>
            /// </param>
            /// <param name='cdSap'>
            /// </param>
            public static IList<Nota> GetNotaVinculadaTrem(this INotas operations, int idTrem, string cdSap)
            {
                return Task.Factory.StartNew(s => ((INotas)s).GetNotaVinculadaTremAsync(idTrem, cdSap), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idTrem'>
            /// </param>
            /// <param name='cdSap'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Nota>> GetNotaVinculadaTremAsync(this INotas operations, int idTrem, string cdSap, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNotaVinculadaTremWithHttpMessagesAsync(idTrem, cdSap, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Nota> GetAll(this INotas operations)
            {
                return Task.Factory.StartNew(s => ((INotas)s).GetAllAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Nota>> GetAllAsync(this INotas operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static IList<Nota> GetNotasVinculadas(this INotas operations, int id)
            {
                return Task.Factory.StartNew(s => ((INotas)s).GetNotasVinculadasAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Nota>> GetNotasVinculadasAsync(this INotas operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNotasVinculadasWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idEntregaTrem'>
            /// </param>
            /// <param name='idTipoNota'>
            /// </param>
            public static IList<Nota> GetNotasVinculadasEntregaTrem(this INotas operations, int idEntregaTrem, int idTipoNota)
            {
                return Task.Factory.StartNew(s => ((INotas)s).GetNotasVinculadasEntregaTremAsync(idEntregaTrem, idTipoNota), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idEntregaTrem'>
            /// </param>
            /// <param name='idTipoNota'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Nota>> GetNotasVinculadasEntregaTremAsync(this INotas operations, int idEntregaTrem, int idTipoNota, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNotasVinculadasEntregaTremWithHttpMessagesAsync(idEntregaTrem, idTipoNota, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static IList<Nota> GetNotasVinculadasNavigationProperties(this INotas operations, int id)
            {
                return Task.Factory.StartNew(s => ((INotas)s).GetNotasVinculadasNavigationPropertiesAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Nota>> GetNotasVinculadasNavigationPropertiesAsync(this INotas operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNotasVinculadasNavigationPropertiesWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nota'>
            /// </param>
            public static IList<Nota> ConsultarNotaParametros(this INotas operations, Nota nota)
            {
                return Task.Factory.StartNew(s => ((INotas)s).ConsultarNotaParametrosAsync(nota), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nota'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Nota>> ConsultarNotaParametrosAsync(this INotas operations, Nota nota, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConsultarNotaParametrosWithHttpMessagesAsync(nota, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nota'>
            /// </param>
            /// <param name='dtIni'>
            /// </param>
            /// <param name='dtFim'>
            /// </param>
            public static IList<Nota> ConsultarNotaCopeseEFMRParametros(this INotas operations, Nota nota, DateTime dtIni, DateTime dtFim)
            {
                return Task.Factory.StartNew(s => ((INotas)s).ConsultarNotaCopeseEFMRParametrosAsync(nota, dtIni, dtFim), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nota'>
            /// </param>
            /// <param name='dtIni'>
            /// </param>
            /// <param name='dtFim'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Nota>> ConsultarNotaCopeseEFMRParametrosAsync(this INotas operations, Nota nota, DateTime dtIni, DateTime dtFim, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConsultarNotaCopeseEFMRParametrosWithHttpMessagesAsync(nota, dtIni, dtFim, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nota'>
            /// </param>
            /// <param name='dtIni'>
            /// </param>
            /// <param name='dtFim'>
            /// </param>
            public static IList<Nota> ConsultarNotaPericiaMRParametros(this INotas operations, Nota nota, string dtIni, string dtFim)
            {
                return Task.Factory.StartNew(s => ((INotas)s).ConsultarNotaPericiaMRParametrosAsync(nota, dtIni, dtFim), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nota'>
            /// </param>
            /// <param name='dtIni'>
            /// </param>
            /// <param name='dtFim'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Nota>> ConsultarNotaPericiaMRParametrosAsync(this INotas operations, Nota nota, string dtIni, string dtFim, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConsultarNotaPericiaMRParametrosWithHttpMessagesAsync(nota, dtIni, dtFim, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nrNotaSap'>
            /// </param>
            public static Nota GetNotasCodigoSapPericia(this INotas operations, string nrNotaSap)
            {
                return Task.Factory.StartNew(s => ((INotas)s).GetNotasCodigoSapPericiaAsync(nrNotaSap), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nrNotaSap'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Nota> GetNotasCodigoSapPericiaAsync(this INotas operations, string nrNotaSap, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNotasCodigoSapPericiaWithHttpMessagesAsync(nrNotaSap, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='obj'>
            /// </param>
            public static Nota CriarMI(this INotas operations, Nota obj)
            {
                return Task.Factory.StartNew(s => ((INotas)s).CriarMIAsync(obj), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='obj'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Nota> CriarMIAsync(this INotas operations, Nota obj, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CriarMIWithHttpMessagesAsync(obj, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='obj'>
            /// </param>
            public static Nota EditarMI(this INotas operations, Nota obj)
            {
                return Task.Factory.StartNew(s => ((INotas)s).EditarMIAsync(obj), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='obj'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Nota> EditarMIAsync(this INotas operations, Nota obj, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditarMIWithHttpMessagesAsync(obj, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='motivo'>
            /// </param>
            public static Nota CancelarMI(this INotas operations, int id, string motivo)
            {
                return Task.Factory.StartNew(s => ((INotas)s).CancelarMIAsync(id, motivo), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='motivo'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Nota> CancelarMIAsync(this INotas operations, int id, string motivo, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CancelarMIWithHttpMessagesAsync(id, motivo, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idFrota'>
            /// </param>
            /// <param name='idTrem'>
            /// </param>
            /// <param name='idCarro'>
            /// </param>
            /// <param name='cdSap'>
            /// </param>
            /// <param name='dataInicial'>
            /// </param>
            /// <param name='dataFinal'>
            /// </param>
            /// <param name='idNotificador'>
            /// </param>
            /// <param name='rgNotificador'>
            /// </param>
            /// <param name='idStatus'>
            /// </param>
            public static IList<Nota> PesquisarNotaMI(this INotas operations, int? idFrota = default(int?), int? idTrem = default(int?), int? idCarro = default(int?), string cdSap = default(string), string dataInicial = default(string), string dataFinal = default(string), int? idNotificador = default(int?), int? rgNotificador = default(int?), int? idStatus = default(int?))
            {
                return Task.Factory.StartNew(s => ((INotas)s).PesquisarNotaMIAsync(idFrota, idTrem, idCarro, cdSap, dataInicial, dataFinal, idNotificador, rgNotificador, idStatus), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idFrota'>
            /// </param>
            /// <param name='idTrem'>
            /// </param>
            /// <param name='idCarro'>
            /// </param>
            /// <param name='cdSap'>
            /// </param>
            /// <param name='dataInicial'>
            /// </param>
            /// <param name='dataFinal'>
            /// </param>
            /// <param name='idNotificador'>
            /// </param>
            /// <param name='rgNotificador'>
            /// </param>
            /// <param name='idStatus'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Nota>> PesquisarNotaMIAsync(this INotas operations, int? idFrota = default(int?), int? idTrem = default(int?), int? idCarro = default(int?), string cdSap = default(string), string dataInicial = default(string), string dataFinal = default(string), int? idNotificador = default(int?), int? rgNotificador = default(int?), int? idStatus = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PesquisarNotaMIWithHttpMessagesAsync(idFrota, idTrem, idCarro, cdSap, dataInicial, dataFinal, idNotificador, rgNotificador, idStatus, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='obj'>
            /// </param>
            public static Nota AddPericia(this INotas operations, Nota obj)
            {
                return Task.Factory.StartNew(s => ((INotas)s).AddPericiaAsync(obj), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='obj'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Nota> AddPericiaAsync(this INotas operations, Nota obj, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddPericiaWithHttpMessagesAsync(obj, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='obj'>
            /// </param>
            public static Nota UpdatePericia(this INotas operations, Nota obj)
            {
                return Task.Factory.StartNew(s => ((INotas)s).UpdatePericiaAsync(obj), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='obj'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Nota> UpdatePericiaAsync(this INotas operations, Nota obj, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdatePericiaWithHttpMessagesAsync(obj, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='obj'>
            /// </param>
            public static Nota LiberarPericia(this INotas operations, Nota obj)
            {
                return Task.Factory.StartNew(s => ((INotas)s).LiberarPericiaAsync(obj), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='obj'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Nota> LiberarPericiaAsync(this INotas operations, Nota obj, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LiberarPericiaWithHttpMessagesAsync(obj, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='obj'>
            /// </param>
            public static Nota EncerrarPericia(this INotas operations, Nota obj)
            {
                return Task.Factory.StartNew(s => ((INotas)s).EncerrarPericiaAsync(obj), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='obj'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Nota> EncerrarPericiaAsync(this INotas operations, Nota obj, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EncerrarPericiaWithHttpMessagesAsync(obj, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='obj'>
            /// </param>
            public static Nota AddCopese(this INotas operations, Nota obj)
            {
                return Task.Factory.StartNew(s => ((INotas)s).AddCopeseAsync(obj), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='obj'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Nota> AddCopeseAsync(this INotas operations, Nota obj, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddCopeseWithHttpMessagesAsync(obj, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='obj'>
            /// </param>
            public static Nota UpdateCopese(this INotas operations, Nota obj)
            {
                return Task.Factory.StartNew(s => ((INotas)s).UpdateCopeseAsync(obj), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='obj'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Nota> UpdateCopeseAsync(this INotas operations, Nota obj, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateCopeseWithHttpMessagesAsync(obj, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='obj'>
            /// </param>
            public static Nota DescaracterizarCopese(this INotas operations, Nota obj)
            {
                return Task.Factory.StartNew(s => ((INotas)s).DescaracterizarCopeseAsync(obj), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='obj'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Nota> DescaracterizarCopeseAsync(this INotas operations, Nota obj, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DescaracterizarCopeseWithHttpMessagesAsync(obj, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='obj'>
            /// </param>
            public static Nota EncerrarCopese(this INotas operations, Nota obj)
            {
                return Task.Factory.StartNew(s => ((INotas)s).EncerrarCopeseAsync(obj), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='obj'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Nota> EncerrarCopeseAsync(this INotas operations, Nota obj, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EncerrarCopeseWithHttpMessagesAsync(obj, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='obj'>
            /// </param>
            public static Nota Add(this INotas operations, Nota obj)
            {
                return Task.Factory.StartNew(s => ((INotas)s).AddAsync(obj), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='obj'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Nota> AddAsync(this INotas operations, Nota obj, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddWithHttpMessagesAsync(obj, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='obj'>
            /// </param>
            public static Nota Update(this INotas operations, Nota obj)
            {
                return Task.Factory.StartNew(s => ((INotas)s).UpdateAsync(obj), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='obj'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Nota> UpdateAsync(this INotas operations, Nota obj, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(obj, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static Nota DeleteById(this INotas operations, int id)
            {
                return Task.Factory.StartNew(s => ((INotas)s).DeleteByIdAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Nota> DeleteByIdAsync(this INotas operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
