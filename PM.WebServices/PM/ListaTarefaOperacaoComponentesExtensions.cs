// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace PM.WebServices
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for ListaTarefaOperacaoComponentes.
    /// </summary>
    public static partial class ListaTarefaOperacaoComponentesExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static ListaTarefaOperacaoComponente GetById(this IListaTarefaOperacaoComponentes operations, int id)
            {
                return Task.Factory.StartNew(s => ((IListaTarefaOperacaoComponentes)s).GetByIdAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ListaTarefaOperacaoComponente> GetByIdAsync(this IListaTarefaOperacaoComponentes operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<ListaTarefaOperacaoComponente> GetAll(this IListaTarefaOperacaoComponentes operations)
            {
                return Task.Factory.StartNew(s => ((IListaTarefaOperacaoComponentes)s).GetAllAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ListaTarefaOperacaoComponente>> GetAllAsync(this IListaTarefaOperacaoComponentes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idLtTarefa'>
            /// </param>
            public static IList<ListaTarefaOperacaoComponente> GetByidlttarefa(this IListaTarefaOperacaoComponentes operations, int idLtTarefa)
            {
                return Task.Factory.StartNew(s => ((IListaTarefaOperacaoComponentes)s).GetByidlttarefaAsync(idLtTarefa), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idLtTarefa'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ListaTarefaOperacaoComponente>> GetByidlttarefaAsync(this IListaTarefaOperacaoComponentes operations, int idLtTarefa, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByidlttarefaWithHttpMessagesAsync(idLtTarefa, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='obj'>
            /// </param>
            public static ListaTarefaOperacaoComponente Add(this IListaTarefaOperacaoComponentes operations, ListaTarefaOperacaoComponente obj)
            {
                return Task.Factory.StartNew(s => ((IListaTarefaOperacaoComponentes)s).AddAsync(obj), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='obj'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ListaTarefaOperacaoComponente> AddAsync(this IListaTarefaOperacaoComponentes operations, ListaTarefaOperacaoComponente obj, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddWithHttpMessagesAsync(obj, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='obj'>
            /// </param>
            public static ListaTarefaOperacaoComponente Update(this IListaTarefaOperacaoComponentes operations, ListaTarefaOperacaoComponente obj)
            {
                return Task.Factory.StartNew(s => ((IListaTarefaOperacaoComponentes)s).UpdateAsync(obj), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='obj'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ListaTarefaOperacaoComponente> UpdateAsync(this IListaTarefaOperacaoComponentes operations, ListaTarefaOperacaoComponente obj, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(obj, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='listaTarefaOperacaoComponente'>
            /// </param>
            public static ListaTarefaOperacaoComponente Delete(this IListaTarefaOperacaoComponentes operations, ListaTarefaOperacaoComponente listaTarefaOperacaoComponente)
            {
                return Task.Factory.StartNew(s => ((IListaTarefaOperacaoComponentes)s).DeleteAsync(listaTarefaOperacaoComponente), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='listaTarefaOperacaoComponente'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ListaTarefaOperacaoComponente> DeleteAsync(this IListaTarefaOperacaoComponentes operations, ListaTarefaOperacaoComponente listaTarefaOperacaoComponente, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(listaTarefaOperacaoComponente, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
